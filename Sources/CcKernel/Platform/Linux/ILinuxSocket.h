/**
 * This file is part of CcOS.
 *
 * CcOS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CcOS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with CcOS.  If not, see <http://www.gnu.org/licenses/>.
 **/
/**
 * @file
 *
 * @author    Andreas Dirmeier
 * @copyright  Andreas Dirmeier (C) 2022
 * @par       Language: C++11
 * @brief     Class ILinuxSocket
 */
#pragma once

#include "CcBase.h"
#include "Network/ISocket.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

/**
 * @brief Basic socket handling on Linux systems
 */
class ILinuxSocket : public ISocket
{
public:
  /**
   * @brief Constructor
   * @param eType: Target socket type.
   */
  ILinuxSocket( ESocketType eType);

  /**
   * @brief Initialize socket with already available system data
   * @param socket:       Socket handle
   * @param sockAddr:     Socket address info
   * @param sockAddrlen:  Socket address info length
   */
  ILinuxSocket(int socket, sockaddr sockAddr, uint32 sockAddrlen);

  /**
   * @brief Destructor
   */
  virtual ~ILinuxSocket();

  virtual CcSocketAddressInfo getHostByName(const CcString& sHostname) override;

  virtual CcStatus setTimeout(const CcDateTime& uiTimeValue, ERwMode eMode = ERwMode::ReadWrite) override;

  virtual CcSocketAddressInfo& getAddressInfo() override
  { return m_oConnectionInfo; }

  virtual CcSocketAddressInfo& getPeerInfo() override
  { return m_oPeerInfo; }

  virtual void setPeerInfo(const CcSocketAddressInfo& oPeerInfo) override;

  virtual CcStatus setOption(ESocketOption eOption, void* pData, size_t uiDataLen) override;

  virtual CcStatus setOptionRaw(int iLevel, int iOptName, void* pData, size_t uiDataLen) override;

  virtual SOCKETFD getSocketFD() override { return m_hClientSocket; }

protected:
  int                 m_hClientSocket = -1; //!< Socket handle generated by inheriting class
  CcSocketAddressInfo m_oConnectionInfo;    //!< Connection info on local device
  CcSocketAddressInfo m_oPeerInfo;          //!< Connection info of remote service
};
