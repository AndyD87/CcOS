################################################################################
# Config Check for cmake builds
################################################################################

# Setup basic include path
if(NOT CC_CURRENT_CONFIG_DIR)
  set(CC_CURRENT_CONFIG_DIR ${CMAKE_CURRENT_SOURCE_DIR})
endif(NOT CC_CURRENT_CONFIG_DIR)

if(WINDOWS)
  if(CcOS_FIND_COMPONENTS)
    set(CCOS_BUILDLEVEL 1)
    foreach(COMPONENT ${CcOS_FIND_COMPONENTS})
    if(${COMPONENT} STREQUAL "jpeg")
      set(CCOS_THIRDPARTY_JPEG_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "openssl")
      set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "sqlite3")
      set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcModule")
      set(CCOS_CCMODULE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcKernel")
      set(CCOS_CCKERNEL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcKernelModule")
      set(CCOS_CCKERNELMODULE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcTestModule")
      set(CCOS_MODULES_CCTESTMODULE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcScpi")
      set(CCOS_CCSCPI_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcSsl")
      set(CCOS_CCSSL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcFtp")
      set(CCOS_CCFTP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcShell")
      set(CCOS_CCSHELL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcTftp")
      set(CCOS_CCTFTP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcMqtt")
      set(CCOS_CCMQTT_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcDocuments")
      set(CCOS_CCDOCUMENTS_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcDhcp")
      set(CCOS_CCDHCP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcHttp")
      set(CCOS_CCHTTP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcMedia")
      set(CCOS_CCMEDIA_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcRemoteDevice")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcBitcoin")
      set(CCOS_CCBITCOIN_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcTesting")
      set(CCOS_CCTESTING_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcSql")
      set(CCOS_CCSQL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcOSBuildConfig")
      set(CCOS_CCOSBUILDCONFIG_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcAppInterfaces")
      set(CCOS_CCAPPINTERFACES_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcKernelModuleInterface")
      set(CCOS_CCKERNELMODULEINTERFACE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcDhcpServer")
      set(CCOS_APPS_CCDHCPSERVER_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcShellApp")
      set(CCOS_APPS_CCSHELLAPP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcScpiCli")
      set(CCOS_APPS_CCSCPICLI_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcFs")
      set(CCOS_APPS_CCFS_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcHash")
      set(CCOS_APPS_CCHASH_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcKernelModuleTestDriver")
      set(CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcOSBuildConfigApp")
      set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcOSModuleLoader")
      set(CCOS_APPS_CCOSMODULELOADER_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcOSArgumentsApp")
      set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcOSResourceApp")
      set(CCOS_APPS_CCOSRESOURCEAPP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcRemoteDeviceServer")
      set(CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcRemoteDeviceClient")
      set(CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcVDisk")
      set(CCOS_APPS_CCVDISK_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcUsbDriver")
      set(CCOS_APPS_CCUSBDRIVER_ACTIVE 4)
    endif()
    endforeach()
  endif()
  ################################################################################
  # jpeg
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
    set(CCOS_THIRDPARTY_JPEG_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
    set(CCOS_THIRDPARTY_JPEG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
    set(CCOS_THIRDPARTY_JPEG_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
    set(CCOS_THIRDPARTY_JPEG_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
    set(CCOS_THIRDPARTY_JPEG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/jpeg")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # openssl
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
    set(CCOS_THIRDPARTY_OPENSSL_VERSION 1.1.1.16)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
    set(CCOS_THIRDPARTY_OPENSSL_PREBUILD true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
    set(CCOS_THIRDPARTY_OPENSSL_STATIC true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
    set(CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCSSL_ACTIVE)
      if(${CCOS_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 2)
      endif(${CCOS_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSSL_ACTIVE)
  endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/openssl")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # sqlite3
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
    set(CCOS_THIRDPARTY_SQLITE3_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
    set(CCOS_THIRDPARTY_SQLITE3_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
    set(CCOS_THIRDPARTY_SQLITE3_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
    set(CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/sqlite3")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcModule
  ################################################################################
  if(NOT DEFINED CCOS_CCMODULE_ACTIVE)
    set(CCOS_CCMODULE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCMODULE_VERSION)
    set(CCOS_CCMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMODULE_VERSION)
  if(NOT DEFINED CCOS_CCMODULE_PREBUILD)
    set(CCOS_CCMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCMODULE_STATIC)
    set(CCOS_CCMODULE_STATIC true)
  endif(NOT DEFINED CCOS_CCMODULE_STATIC)
  if(NOT DEFINED CCOS_CCMODULE_STATICRUNTIME)
    set(CCOS_CCMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCKERNEL_ACTIVE)
      if(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNEL_ACTIVE)
    if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCSCPI_ACTIVE)
      if(${CCOS_CCSCPI_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSCPI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSCPI_ACTIVE)
    if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
      if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(DEFINED CCOS_CCSSL_ACTIVE)
      if(${CCOS_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCFTP_ACTIVE)
      if(${CCOS_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCSHELL_ACTIVE)
      if(${CCOS_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSHELL_ACTIVE)
    if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
      if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(DEFINED CCOS_CCTFTP_ACTIVE)
      if(${CCOS_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCMQTT_ACTIVE)
      if(${CCOS_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCMTP_ACTIVE)
      if(${CCOS_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMTP_ACTIVE)
    if(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCDHCP_ACTIVE)
      if(${CCOS_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCHTTP_ACTIVE)
      if(${CCOS_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
      if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(DEFINED CCOS_CCTESTING_ACTIVE)
      if(${CCOS_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCSQL_ACTIVE)
      if(${CCOS_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSQL_ACTIVE)
    if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
      if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
      if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  endif(${CCOS_CCMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcModule")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcKernel
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    set(CCOS_CCKERNEL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNEL_VERSION)
    set(CCOS_CCKERNEL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNEL_VERSION)
  if(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
    set(CCOS_CCKERNEL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNEL_STATIC)
    set(CCOS_CCKERNEL_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNEL_STATIC)
  if(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
    set(CCOS_CCKERNEL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCSCPI_ACTIVE)
      if(${CCOS_CCSCPI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSCPI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSCPI_ACTIVE)
    if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
      if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(DEFINED CCOS_CCSSL_ACTIVE)
      if(${CCOS_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCFTP_ACTIVE)
      if(${CCOS_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCSHELL_ACTIVE)
      if(${CCOS_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSHELL_ACTIVE)
    if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
      if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(DEFINED CCOS_CCTFTP_ACTIVE)
      if(${CCOS_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCMQTT_ACTIVE)
      if(${CCOS_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCMTP_ACTIVE)
      if(${CCOS_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMTP_ACTIVE)
    if(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCDHCP_ACTIVE)
      if(${CCOS_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCHTTP_ACTIVE)
      if(${CCOS_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
      if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(DEFINED CCOS_CCTESTING_ACTIVE)
      if(${CCOS_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCSQL_ACTIVE)
      if(${CCOS_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSQL_ACTIVE)
    if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
      if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
      if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCMODULE_ACTIVE)
      message("Disable CcKernel")
      message("Dependency for CcKernel not solved: CcModule")
      set(CCOS_CCKERNEL_ACTIVE 0)
    elseif(${CCOS_CCMODULE_ACTIVE} EQUAL 0)
      message("Disable CcKernel")
      message("Dependency for CcKernel not enabled but required: CcModule")
     set(CCOS_CCKERNEL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCMODULE_ACTIVE)
  elseif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernel not solved: CcModule")
    elseif(${CCOS_CCMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernel not enabled but required: CcModule")
    endif(NOT DEFINED CCOS_CCMODULE_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernel")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcKernelModule
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    set(CCOS_CCKERNELMODULE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNELMODULE_VERSION)
    set(CCOS_CCKERNELMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_VERSION)
  if(NOT DEFINED CCOS_CCKERNELMODULE_PREBUILD)
    set(CCOS_CCKERNELMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNELMODULE_STATIC)
    set(CCOS_CCKERNELMODULE_STATIC true)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_STATIC)
  if(NOT DEFINED CCOS_CCKERNELMODULE_STATICRUNTIME)
    set(CCOS_CCKERNELMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_APPS_CCFS_ACTIVE)
      if(${CCOS_APPS_CCFS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
      if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
      if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
      if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
  endif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernelModule")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcTestModule
  ################################################################################
  if(NOT DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    set(CCOS_MODULES_CCTESTMODULE_ACTIVE 0)
  endif(NOT DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(NOT DEFINED CCOS_MODULES_CCTESTMODULE_VERSION)
    set(CCOS_MODULES_CCTESTMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_MODULES_CCTESTMODULE_VERSION)
  if(NOT DEFINED CCOS_MODULES_CCTESTMODULE_PREBUILD)
    set(CCOS_MODULES_CCTESTMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_MODULES_CCTESTMODULE_PREBUILD)
  if(NOT DEFINED CCOS_MODULES_CCTESTMODULE_STATIC)
    set(CCOS_MODULES_CCTESTMODULE_STATIC false)
  endif(NOT DEFINED CCOS_MODULES_CCTESTMODULE_STATIC)
  if(NOT DEFINED CCOS_MODULES_CCTESTMODULE_STATICRUNTIME)
    set(CCOS_MODULES_CCTESTMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_MODULES_CCTESTMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTestModule")
      message("Dependency for CcTestModule not solved: CcKernel")
      set(CCOS_MODULES_CCTESTMODULE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTestModule")
      message("Dependency for CcTestModule not enabled but required: CcKernel")
     set(CCOS_MODULES_CCTESTMODULE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTestModule not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTestModule not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Modules/CcTestModule")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcScpi
  ################################################################################
  if(NOT DEFINED CCOS_CCSCPI_ACTIVE)
    set(CCOS_CCSCPI_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCSCPI_ACTIVE)
  if(NOT DEFINED CCOS_CCSCPI_VERSION)
    set(CCOS_CCSCPI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCSCPI_VERSION)
  if(NOT DEFINED CCOS_CCSCPI_PREBUILD)
    set(CCOS_CCSCPI_PREBUILD false)
  endif(NOT DEFINED CCOS_CCSCPI_PREBUILD)
  if(NOT DEFINED CCOS_CCSCPI_STATIC)
    set(CCOS_CCSCPI_STATIC false)
  endif(NOT DEFINED CCOS_CCSCPI_STATIC)
  if(NOT DEFINED CCOS_CCSCPI_STATICRUNTIME)
    set(CCOS_CCSCPI_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCSCPI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
      if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
        set(CCOS_CCSCPI_ACTIVE 2)
      endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  endif(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcScpi")
      message("Dependency for CcScpi not solved: CcKernel")
      set(CCOS_CCSCPI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcScpi")
      message("Dependency for CcScpi not enabled but required: CcKernel")
     set(CCOS_CCSCPI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCSCPI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcScpi not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcScpi not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcScpi")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcSsl
  ################################################################################
  if(NOT DEFINED CCOS_CCSSL_ACTIVE)
    set(CCOS_CCSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCSSL_ACTIVE)
  if(NOT DEFINED CCOS_CCSSL_VERSION)
    set(CCOS_CCSSL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCSSL_VERSION)
  if(NOT DEFINED CCOS_CCSSL_PREBUILD)
    set(CCOS_CCSSL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCSSL_PREBUILD)
  if(NOT DEFINED CCOS_CCSSL_STATIC)
    set(CCOS_CCSSL_STATIC false)
  endif(NOT DEFINED CCOS_CCSSL_STATIC)
  if(NOT DEFINED CCOS_CCSSL_STATICRUNTIME)
    set(CCOS_CCSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCSSL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCSSL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCSSL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcSsl")
      message("Dependency for CcSsl not solved: CcKernel")
      set(CCOS_CCSSL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcSsl")
      message("Dependency for CcSsl not enabled but required: CcKernel")
     set(CCOS_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message("Disable CcSsl")
      message("Dependency for CcSsl not solved: openssl")
      set(CCOS_CCSSL_ACTIVE 0)
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message("Disable CcSsl")
      message("Dependency for CcSsl not enabled but required: openssl")
     set(CCOS_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  elseif(${CCOS_CCSSL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: openssl")
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: openssl")
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  endif(${CCOS_CCSSL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcSsl")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcFtp
  ################################################################################
  if(NOT DEFINED CCOS_CCFTP_ACTIVE)
    set(CCOS_CCFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCFTP_VERSION)
    set(CCOS_CCFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCFTP_VERSION)
  if(NOT DEFINED CCOS_CCFTP_PREBUILD)
    set(CCOS_CCFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCFTP_STATIC)
    set(CCOS_CCFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCFTP_STATIC)
  if(NOT DEFINED CCOS_CCFTP_STATICRUNTIME)
    set(CCOS_CCFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCFTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcFtp")
      message("Dependency for CcFtp not solved: CcKernel")
      set(CCOS_CCFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcFtp")
      message("Dependency for CcFtp not enabled but required: CcKernel")
     set(CCOS_CCFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcFtp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcFtp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCFTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcFtp")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcShell
  ################################################################################
  if(NOT DEFINED CCOS_CCSHELL_ACTIVE)
    set(CCOS_CCSHELL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCSHELL_ACTIVE)
  if(NOT DEFINED CCOS_CCSHELL_VERSION)
    set(CCOS_CCSHELL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCSHELL_VERSION)
  if(NOT DEFINED CCOS_CCSHELL_PREBUILD)
    set(CCOS_CCSHELL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCSHELL_PREBUILD)
  if(NOT DEFINED CCOS_CCSHELL_STATIC)
    set(CCOS_CCSHELL_STATIC false)
  endif(NOT DEFINED CCOS_CCSHELL_STATIC)
  if(NOT DEFINED CCOS_CCSHELL_STATICRUNTIME)
    set(CCOS_CCSHELL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCSHELL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCSHELL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
      if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
        set(CCOS_CCSHELL_ACTIVE 2)
      endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  endif(${CCOS_CCSHELL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCSHELL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcShell")
      message("Dependency for CcShell not solved: CcKernel")
      set(CCOS_CCSHELL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcShell")
      message("Dependency for CcShell not enabled but required: CcKernel")
     set(CCOS_CCSHELL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCSHELL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcShell not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcShell not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCSHELL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcShell")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcTftp
  ################################################################################
  if(NOT DEFINED CCOS_CCTFTP_ACTIVE)
    set(CCOS_CCTFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCTFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCTFTP_VERSION)
    set(CCOS_CCTFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCTFTP_VERSION)
  if(NOT DEFINED CCOS_CCTFTP_PREBUILD)
    set(CCOS_CCTFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCTFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCTFTP_STATIC)
    set(CCOS_CCTFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCTFTP_STATIC)
  if(NOT DEFINED CCOS_CCTFTP_STATICRUNTIME)
    set(CCOS_CCTFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCTFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCTFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCTFTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCTFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTftp")
      message("Dependency for CcTftp not solved: CcKernel")
      set(CCOS_CCTFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTftp")
      message("Dependency for CcTftp not enabled but required: CcKernel")
     set(CCOS_CCTFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCTFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTftp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTftp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCTFTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcTftp")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcMqtt
  ################################################################################
  if(NOT DEFINED CCOS_CCMQTT_ACTIVE)
    set(CCOS_CCMQTT_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMQTT_ACTIVE)
  if(NOT DEFINED CCOS_CCMQTT_VERSION)
    set(CCOS_CCMQTT_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMQTT_VERSION)
  if(NOT DEFINED CCOS_CCMQTT_PREBUILD)
    set(CCOS_CCMQTT_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMQTT_PREBUILD)
  if(NOT DEFINED CCOS_CCMQTT_STATIC)
    set(CCOS_CCMQTT_STATIC false)
  endif(NOT DEFINED CCOS_CCMQTT_STATIC)
  if(NOT DEFINED CCOS_CCMQTT_STATICRUNTIME)
    set(CCOS_CCMQTT_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMQTT_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not solved: CcKernel")
      set(CCOS_CCMQTT_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not enabled but required: CcKernel")
     set(CCOS_CCMQTT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMQTT_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMqtt not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMqtt not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcMqtt")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcDocuments
  ################################################################################
  if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    set(CCOS_CCDOCUMENTS_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  if(NOT DEFINED CCOS_CCDOCUMENTS_VERSION)
    set(CCOS_CCDOCUMENTS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_VERSION)
  if(NOT DEFINED CCOS_CCDOCUMENTS_PREBUILD)
    set(CCOS_CCDOCUMENTS_PREBUILD false)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_PREBUILD)
  if(NOT DEFINED CCOS_CCDOCUMENTS_STATIC)
    set(CCOS_CCDOCUMENTS_STATIC false)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_STATIC)
  if(NOT DEFINED CCOS_CCDOCUMENTS_STATICRUNTIME)
    set(CCOS_CCDOCUMENTS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCDHCP_ACTIVE)
      if(${CCOS_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCHTTP_ACTIVE)
      if(${CCOS_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
      if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  endif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not solved: CcKernel")
      set(CCOS_CCDOCUMENTS_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not enabled but required: CcKernel")
     set(CCOS_CCDOCUMENTS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDocuments not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDocuments not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcDocuments")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcDhcp
  ################################################################################
  if(NOT DEFINED CCOS_CCDHCP_ACTIVE)
    set(CCOS_CCDHCP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCDHCP_ACTIVE)
  if(NOT DEFINED CCOS_CCDHCP_VERSION)
    set(CCOS_CCDHCP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCDHCP_VERSION)
  if(NOT DEFINED CCOS_CCDHCP_PREBUILD)
    set(CCOS_CCDHCP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCDHCP_PREBUILD)
  if(NOT DEFINED CCOS_CCDHCP_STATIC)
    set(CCOS_CCDHCP_STATIC false)
  endif(NOT DEFINED CCOS_CCDHCP_STATIC)
  if(NOT DEFINED CCOS_CCDHCP_STATICRUNTIME)
    set(CCOS_CCDHCP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCDHCP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcKernel")
      set(CCOS_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcKernel")
     set(CCOS_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcDocuments")
      set(CCOS_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcDocuments")
     set(CCOS_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcDhcp")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcHttp
  ################################################################################
  if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
    set(CCOS_CCHTTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  if(NOT DEFINED CCOS_CCHTTP_VERSION)
    set(CCOS_CCHTTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCHTTP_VERSION)
  if(NOT DEFINED CCOS_CCHTTP_PREBUILD)
    set(CCOS_CCHTTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCHTTP_PREBUILD)
  if(NOT DEFINED CCOS_CCHTTP_STATIC)
    set(CCOS_CCHTTP_STATIC false)
  endif(NOT DEFINED CCOS_CCHTTP_STATIC)
  if(NOT DEFINED CCOS_CCHTTP_STATICRUNTIME)
    set(CCOS_CCHTTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCHTTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
  endif(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcKernel")
      set(CCOS_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcKernel")
     set(CCOS_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcDocuments")
      set(CCOS_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcDocuments")
     set(CCOS_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcHttp")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcMedia
  ################################################################################
  if(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
    set(CCOS_CCMEDIA_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
  if(NOT DEFINED CCOS_CCMEDIA_VERSION)
    set(CCOS_CCMEDIA_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMEDIA_VERSION)
  if(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
    set(CCOS_CCMEDIA_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
  if(NOT DEFINED CCOS_CCMEDIA_STATIC)
    set(CCOS_CCMEDIA_STATIC true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATIC)
  if(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
    set(CCOS_CCMEDIA_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMedia")
      message("Dependency for CcMedia not solved: CcKernel")
      set(CCOS_CCMEDIA_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMedia")
      message("Dependency for CcMedia not enabled but required: CcKernel")
     set(CCOS_CCMEDIA_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message("Disable CcMedia")
      message("Dependency for CcMedia not solved: CcHttp")
      set(CCOS_CCMEDIA_ACTIVE 0)
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcMedia")
      message("Dependency for CcMedia not enabled but required: CcHttp")
     set(CCOS_CCMEDIA_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  elseif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMedia not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMedia not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMedia not solved: CcHttp")
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMedia not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcMedia")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcRemoteDevice
  ################################################################################
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    set(CCOS_CCREMOTEDEVICE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_VERSION)
    set(CCOS_CCREMOTEDEVICE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_VERSION)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_PREBUILD)
    set(CCOS_CCREMOTEDEVICE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_PREBUILD)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_STATIC)
    set(CCOS_CCREMOTEDEVICE_STATIC false)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_STATIC)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_STATICRUNTIME)
    set(CCOS_CCREMOTEDEVICE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcKernel")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcKernel")
     set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcDocuments")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcDocuments")
     set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcHttp")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcHttp")
     set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcHttp")
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  endif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcRemoteDevice")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcBitcoin
  ################################################################################
  if(NOT DEFINED CCOS_CCBITCOIN_ACTIVE)
    set(CCOS_CCBITCOIN_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCBITCOIN_ACTIVE)
  if(NOT DEFINED CCOS_CCBITCOIN_VERSION)
    set(CCOS_CCBITCOIN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCBITCOIN_VERSION)
  if(NOT DEFINED CCOS_CCBITCOIN_PREBUILD)
    set(CCOS_CCBITCOIN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCBITCOIN_PREBUILD)
  if(NOT DEFINED CCOS_CCBITCOIN_STATIC)
    set(CCOS_CCBITCOIN_STATIC false)
  endif(NOT DEFINED CCOS_CCBITCOIN_STATIC)
  if(NOT DEFINED CCOS_CCBITCOIN_STATICRUNTIME)
    set(CCOS_CCBITCOIN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCBITCOIN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcKernel")
      set(CCOS_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcKernel")
     set(CCOS_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcDocuments")
      set(CCOS_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcDocuments")
     set(CCOS_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcHttp")
      set(CCOS_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcHttp")
     set(CCOS_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  elseif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcHttp")
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  endif(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcBitcoin")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcTesting
  ################################################################################
  if(NOT DEFINED CCOS_CCTESTING_ACTIVE)
    set(CCOS_CCTESTING_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCTESTING_ACTIVE)
  if(NOT DEFINED CCOS_CCTESTING_VERSION)
    set(CCOS_CCTESTING_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCTESTING_VERSION)
  if(NOT DEFINED CCOS_CCTESTING_PREBUILD)
    set(CCOS_CCTESTING_PREBUILD false)
  endif(NOT DEFINED CCOS_CCTESTING_PREBUILD)
  if(NOT DEFINED CCOS_CCTESTING_STATIC)
    set(CCOS_CCTESTING_STATIC false)
  endif(NOT DEFINED CCOS_CCTESTING_STATIC)
  if(NOT DEFINED CCOS_CCTESTING_STATICRUNTIME)
    set(CCOS_CCTESTING_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCTESTING_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
  endif(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTesting")
      message("Dependency for CcTesting not solved: CcKernel")
      set(CCOS_CCTESTING_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTesting")
      message("Dependency for CcTesting not enabled but required: CcKernel")
     set(CCOS_CCTESTING_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCTESTING_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTesting not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTesting not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcTesting")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcSql
  ################################################################################
  if(NOT DEFINED CCOS_CCSQL_ACTIVE)
    set(CCOS_CCSQL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCSQL_ACTIVE)
  if(NOT DEFINED CCOS_CCSQL_VERSION)
    set(CCOS_CCSQL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCSQL_VERSION)
  if(NOT DEFINED CCOS_CCSQL_PREBUILD)
    set(CCOS_CCSQL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCSQL_PREBUILD)
  if(NOT DEFINED CCOS_CCSQL_STATIC)
    set(CCOS_CCSQL_STATIC false)
  endif(NOT DEFINED CCOS_CCSQL_STATIC)
  if(NOT DEFINED CCOS_CCSQL_STATICRUNTIME)
    set(CCOS_CCSQL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCSQL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCSQL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCSQL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCSQL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcSql")
      message("Dependency for CcSql not solved: CcKernel")
      set(CCOS_CCSQL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcSql")
      message("Dependency for CcSql not enabled but required: CcKernel")
     set(CCOS_CCSQL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCSQL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSql not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSql not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCSQL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcSql")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcOSBuildConfig
  ################################################################################
  if(NOT DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    set(CCOS_CCOSBUILDCONFIG_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(NOT DEFINED CCOS_CCOSBUILDCONFIG_VERSION)
    set(CCOS_CCOSBUILDCONFIG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCOSBUILDCONFIG_VERSION)
  if(NOT DEFINED CCOS_CCOSBUILDCONFIG_PREBUILD)
    set(CCOS_CCOSBUILDCONFIG_PREBUILD false)
  endif(NOT DEFINED CCOS_CCOSBUILDCONFIG_PREBUILD)
  if(NOT DEFINED CCOS_CCOSBUILDCONFIG_STATIC)
    set(CCOS_CCOSBUILDCONFIG_STATIC false)
  endif(NOT DEFINED CCOS_CCOSBUILDCONFIG_STATIC)
  if(NOT DEFINED CCOS_CCOSBUILDCONFIG_STATICRUNTIME)
    set(CCOS_CCOSBUILDCONFIG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCOSBUILDCONFIG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcKernel")
      set(CCOS_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcKernel")
     set(CCOS_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcDocuments")
      set(CCOS_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
     set(CCOS_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcOSBuildConfig")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcAppInterfaces
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    set(CCOS_CCAPPINTERFACES_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPINTERFACES_VERSION)
    set(CCOS_CCAPPINTERFACES_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPINTERFACES_VERSION)
  if(NOT DEFINED CCOS_CCAPPINTERFACES_PREBUILD)
    set(CCOS_CCAPPINTERFACES_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPINTERFACES_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPINTERFACES_STATIC)
    set(CCOS_CCAPPINTERFACES_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPINTERFACES_STATIC)
  if(NOT DEFINED CCOS_CCAPPINTERFACES_STATICRUNTIME)
    set(CCOS_CCAPPINTERFACES_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCAPPINTERFACES_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPINTERFACES_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcAppInterfaces")
      message("Dependency for CcAppInterfaces not solved: CcKernel")
      set(CCOS_CCAPPINTERFACES_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcAppInterfaces")
      message("Dependency for CcAppInterfaces not enabled but required: CcKernel")
     set(CCOS_CCAPPINTERFACES_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcAppInterfaces not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcAppInterfaces not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcAppInterfaces")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcKernelModuleInterface
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    set(CCOS_CCKERNELMODULEINTERFACE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_VERSION)
    set(CCOS_CCKERNELMODULEINTERFACE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_VERSION)
  if(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_PREBUILD)
    set(CCOS_CCKERNELMODULEINTERFACE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_STATIC)
    set(CCOS_CCKERNELMODULEINTERFACE_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_STATIC)
  if(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_STATICRUNTIME)
    set(CCOS_CCKERNELMODULEINTERFACE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcKernelModuleInterface")
      message("Dependency for CcKernelModuleInterface not solved: CcKernel")
      set(CCOS_CCKERNELMODULEINTERFACE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcKernelModuleInterface")
      message("Dependency for CcKernelModuleInterface not enabled but required: CcKernel")
     set(CCOS_CCKERNELMODULEINTERFACE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernelModuleInterface not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernelModuleInterface not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernelModuleInterface")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcDhcpServer
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
    set(CCOS_APPS_CCDHCPSERVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_VERSION)
    set(CCOS_APPS_CCDHCPSERVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_PREBUILD)
    set(CCOS_APPS_CCDHCPSERVER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATIC)
    set(CCOS_APPS_CCDHCPSERVER_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATICRUNTIME)
    set(CCOS_APPS_CCDHCPSERVER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDhcpServer")
      message("Dependency for CcDhcpServer not solved: CcKernel")
      set(CCOS_APPS_CCDHCPSERVER_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDhcpServer")
      message("Dependency for CcDhcpServer not enabled but required: CcKernel")
     set(CCOS_APPS_CCDHCPSERVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcpServer not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcpServer not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcDhcpServer")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcShellApp
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    set(CCOS_APPS_CCSHELLAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCSHELLAPP_VERSION)
    set(CCOS_APPS_CCSHELLAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCSHELLAPP_VERSION)
  if(NOT DEFINED CCOS_APPS_CCSHELLAPP_PREBUILD)
    set(CCOS_APPS_CCSHELLAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCSHELLAPP_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCSHELLAPP_STATIC)
    set(CCOS_APPS_CCSHELLAPP_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCSHELLAPP_STATIC)
  if(NOT DEFINED CCOS_APPS_CCSHELLAPP_STATICRUNTIME)
    set(CCOS_APPS_CCSHELLAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCSHELLAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCSHELLAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCSHELLAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcShellApp")
      message("Dependency for CcShellApp not solved: CcKernel")
      set(CCOS_APPS_CCSHELLAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcShellApp")
      message("Dependency for CcShellApp not enabled but required: CcKernel")
     set(CCOS_APPS_CCSHELLAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCSHELL_ACTIVE)
      message("Disable CcShellApp")
      message("Dependency for CcShellApp not solved: CcShell")
      set(CCOS_APPS_CCSHELLAPP_ACTIVE 0)
    elseif(${CCOS_CCSHELL_ACTIVE} EQUAL 0)
      message("Disable CcShellApp")
      message("Dependency for CcShellApp not enabled but required: CcShell")
     set(CCOS_APPS_CCSHELLAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCSHELL_ACTIVE)
  elseif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcShellApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcShellApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCSHELL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcShellApp not solved: CcShell")
    elseif(${CCOS_CCSHELL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcShellApp not enabled but required: CcShell")
    endif(NOT DEFINED CCOS_CCSHELL_ACTIVE)
  endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcShellApp")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcScpiCli
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    set(CCOS_APPS_CCSCPICLI_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCSCPICLI_VERSION)
    set(CCOS_APPS_CCSCPICLI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCSCPICLI_VERSION)
  if(NOT DEFINED CCOS_APPS_CCSCPICLI_PREBUILD)
    set(CCOS_APPS_CCSCPICLI_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCSCPICLI_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCSCPICLI_STATIC)
    set(CCOS_APPS_CCSCPICLI_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCSCPICLI_STATIC)
  if(NOT DEFINED CCOS_APPS_CCSCPICLI_STATICRUNTIME)
    set(CCOS_APPS_CCSCPICLI_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCSCPICLI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCSCPICLI_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCSCPICLI_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCSCPICLI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcScpiCli")
      message("Dependency for CcScpiCli not solved: CcKernel")
      set(CCOS_APPS_CCSCPICLI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcScpiCli")
      message("Dependency for CcScpiCli not enabled but required: CcKernel")
     set(CCOS_APPS_CCSCPICLI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCSCPI_ACTIVE)
      message("Disable CcScpiCli")
      message("Dependency for CcScpiCli not solved: CcScpi")
      set(CCOS_APPS_CCSCPICLI_ACTIVE 0)
    elseif(${CCOS_CCSCPI_ACTIVE} EQUAL 0)
      message("Disable CcScpiCli")
      message("Dependency for CcScpiCli not enabled but required: CcScpi")
     set(CCOS_APPS_CCSCPICLI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCSCPI_ACTIVE)
  elseif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcScpiCli not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcScpiCli not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCSCPI_ACTIVE)
      message(FATAL_ERROR "Dependency for CcScpiCli not solved: CcScpi")
    elseif(${CCOS_CCSCPI_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcScpiCli not enabled but required: CcScpi")
    endif(NOT DEFINED CCOS_CCSCPI_ACTIVE)
  endif(${CCOS_APPS_CCSCPICLI_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcScpiCli")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcFs
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCFS_ACTIVE)
    set(CCOS_APPS_CCFS_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCFS_VERSION)
    set(CCOS_APPS_CCFS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCFS_VERSION)
  if(NOT DEFINED CCOS_APPS_CCFS_PREBUILD)
    set(CCOS_APPS_CCFS_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCFS_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCFS_STATIC)
    set(CCOS_APPS_CCFS_STATIC true)
  endif(NOT DEFINED CCOS_APPS_CCFS_STATIC)
  if(NOT DEFINED CCOS_APPS_CCFS_STATICRUNTIME)
    set(CCOS_APPS_CCFS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_APPS_CCFS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCFS_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCFS_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCFS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message("Disable CcFs")
      message("Dependency for CcFs not solved: CcKernelModule")
      set(CCOS_APPS_CCFS_ACTIVE 0)
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message("Disable CcFs")
      message("Dependency for CcFs not enabled but required: CcKernelModule")
     set(CCOS_APPS_CCFS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  elseif(${CCOS_APPS_CCFS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcFs not solved: CcKernelModule")
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcFs not enabled but required: CcKernelModule")
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  endif(${CCOS_APPS_CCFS_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcFs")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcHash
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCHASH_ACTIVE)
    set(CCOS_APPS_CCHASH_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCHASH_VERSION)
    set(CCOS_APPS_CCHASH_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCHASH_VERSION)
  if(NOT DEFINED CCOS_APPS_CCHASH_PREBUILD)
    set(CCOS_APPS_CCHASH_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCHASH_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCHASH_STATIC)
    set(CCOS_APPS_CCHASH_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCHASH_STATIC)
  if(NOT DEFINED CCOS_APPS_CCHASH_STATICRUNTIME)
    set(CCOS_APPS_CCHASH_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCHASH_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCHASH_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCHASH_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCHASH_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcHash")
      message("Dependency for CcHash not solved: CcKernel")
      set(CCOS_APPS_CCHASH_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcHash")
      message("Dependency for CcHash not enabled but required: CcKernel")
     set(CCOS_APPS_CCHASH_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHash not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHash not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_APPS_CCHASH_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcHash")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcKernelModuleTestDriver
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    set(CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_VERSION)
    set(CCOS_APPS_CCKERNELMODULETESTDRIVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_PREBUILD)
    set(CCOS_APPS_CCKERNELMODULETESTDRIVER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_STATIC)
    set(CCOS_APPS_CCKERNELMODULETESTDRIVER_STATIC true)
  endif(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME)
    set(CCOS_APPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message("Disable CcKernelModuleTestDriver")
      message("Dependency for CcKernelModuleTestDriver not solved: CcKernelModule")
      set(CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE 0)
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message("Disable CcKernelModuleTestDriver")
      message("Dependency for CcKernelModuleTestDriver not enabled but required: CcKernelModule")
     set(CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  elseif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernelModuleTestDriver not solved: CcKernelModule")
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernelModuleTestDriver not enabled but required: CcKernelModule")
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcKernelModuleTestDriver")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcOSBuildConfigApp
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_VERSION)
    set(CCOS_APPS_CCOSBUILDCONFIGAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_VERSION)
  if(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_PREBUILD)
    set(CCOS_APPS_CCOSBUILDCONFIGAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_STATIC)
    set(CCOS_APPS_CCOSBUILDCONFIGAPP_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_STATIC)
  if(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
    set(CCOS_APPS_CCOSBUILDCONFIGAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcKernel")
      set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
     set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcDocuments")
      set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
     set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcOSBuildConfigApp")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcOSModuleLoader
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    set(CCOS_APPS_CCOSMODULELOADER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_VERSION)
    set(CCOS_APPS_CCOSMODULELOADER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_PREBUILD)
    set(CCOS_APPS_CCOSMODULELOADER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_STATIC)
    set(CCOS_APPS_CCOSMODULELOADER_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_STATICRUNTIME)
    set(CCOS_APPS_CCOSMODULELOADER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSModuleLoader")
      message("Dependency for CcOSModuleLoader not solved: CcKernel")
      set(CCOS_APPS_CCOSMODULELOADER_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSModuleLoader")
      message("Dependency for CcOSModuleLoader not enabled but required: CcKernel")
     set(CCOS_APPS_CCOSMODULELOADER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSModuleLoader not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSModuleLoader not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcOSModuleLoader")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcOSArgumentsApp
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_VERSION)
    set(CCOS_APPS_CCOSARGUMENTSAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_VERSION)
  if(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_PREBUILD)
    set(CCOS_APPS_CCOSARGUMENTSAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_STATIC)
    set(CCOS_APPS_CCOSARGUMENTSAPP_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_STATIC)
  if(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_STATICRUNTIME)
    set(CCOS_APPS_CCOSARGUMENTSAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSArgumentsApp")
      message("Dependency for CcOSArgumentsApp not solved: CcKernel")
      set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSArgumentsApp")
      message("Dependency for CcOSArgumentsApp not enabled but required: CcKernel")
     set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcOSArgumentsApp")
      message("Dependency for CcOSArgumentsApp not solved: CcDocuments")
      set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcOSArgumentsApp")
      message("Dependency for CcOSArgumentsApp not enabled but required: CcDocuments")
     set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSArgumentsApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSArgumentsApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSArgumentsApp not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSArgumentsApp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcOSArgumentsApp")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcOSResourceApp
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    set(CCOS_APPS_CCOSRESOURCEAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_VERSION)
    set(CCOS_APPS_CCOSRESOURCEAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_VERSION)
  if(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_PREBUILD)
    set(CCOS_APPS_CCOSRESOURCEAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_STATIC)
    set(CCOS_APPS_CCOSRESOURCEAPP_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_STATIC)
  if(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_STATICRUNTIME)
    set(CCOS_APPS_CCOSRESOURCEAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSResourceApp")
      message("Dependency for CcOSResourceApp not solved: CcKernel")
      set(CCOS_APPS_CCOSRESOURCEAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSResourceApp")
      message("Dependency for CcOSResourceApp not enabled but required: CcKernel")
     set(CCOS_APPS_CCOSRESOURCEAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSResourceApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSResourceApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcOSResourceApp")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcRemoteDeviceServer
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    set(CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_VERSION)
    set(CCOS_APPS_CCREMOTEDEVICESERVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_PREBUILD)
    set(CCOS_APPS_CCREMOTEDEVICESERVER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_STATIC)
    set(CCOS_APPS_CCREMOTEDEVICESERVER_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_STATICRUNTIME)
    set(CCOS_APPS_CCREMOTEDEVICESERVER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      message("Disable CcRemoteDeviceServer")
      message("Dependency for CcRemoteDeviceServer not solved: CcRemoteDevice")
      set(CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE 0)
    elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDeviceServer")
      message("Dependency for CcRemoteDeviceServer not enabled but required: CcRemoteDevice")
     set(CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  elseif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceServer not solved: CcRemoteDevice")
    elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceServer not enabled but required: CcRemoteDevice")
    endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcRemoteDeviceServer")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcRemoteDeviceClient
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    set(CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_VERSION)
    set(CCOS_APPS_CCREMOTEDEVICECLIENT_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_VERSION)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_PREBUILD)
    set(CCOS_APPS_CCREMOTEDEVICECLIENT_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_STATIC)
    set(CCOS_APPS_CCREMOTEDEVICECLIENT_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_STATIC)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_STATICRUNTIME)
    set(CCOS_APPS_CCREMOTEDEVICECLIENT_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not solved: CcRemoteDevice")
      set(CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not enabled but required: CcRemoteDevice")
     set(CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  elseif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not solved: CcRemoteDevice")
    elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not enabled but required: CcRemoteDevice")
    endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcRemoteDeviceClient")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcVDisk
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    set(CCOS_APPS_CCVDISK_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCVDISK_VERSION)
    set(CCOS_APPS_CCVDISK_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCVDISK_VERSION)
  if(NOT DEFINED CCOS_APPS_CCVDISK_PREBUILD)
    set(CCOS_APPS_CCVDISK_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCVDISK_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCVDISK_STATIC)
    set(CCOS_APPS_CCVDISK_STATIC true)
  endif(NOT DEFINED CCOS_APPS_CCVDISK_STATIC)
  if(NOT DEFINED CCOS_APPS_CCVDISK_STATICRUNTIME)
    set(CCOS_APPS_CCVDISK_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_APPS_CCVDISK_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCVDISK_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCVDISK_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCVDISK_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message("Disable CcVDisk")
      message("Dependency for CcVDisk not solved: CcKernelModule")
      set(CCOS_APPS_CCVDISK_ACTIVE 0)
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message("Disable CcVDisk")
      message("Dependency for CcVDisk not enabled but required: CcKernelModule")
     set(CCOS_APPS_CCVDISK_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  elseif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcVDisk not solved: CcKernelModule")
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcVDisk not enabled but required: CcKernelModule")
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  endif(${CCOS_APPS_CCVDISK_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcVDisk")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

  ################################################################################
  # CcUsbDriver
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    set(CCOS_APPS_CCUSBDRIVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCUSBDRIVER_VERSION)
    set(CCOS_APPS_CCUSBDRIVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCUSBDRIVER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCUSBDRIVER_PREBUILD)
    set(CCOS_APPS_CCUSBDRIVER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCUSBDRIVER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCUSBDRIVER_STATIC)
    set(CCOS_APPS_CCUSBDRIVER_STATIC true)
  endif(NOT DEFINED CCOS_APPS_CCUSBDRIVER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCUSBDRIVER_STATICRUNTIME)
    set(CCOS_APPS_CCUSBDRIVER_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_APPS_CCUSBDRIVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message("Disable CcUsbDriver")
      message("Dependency for CcUsbDriver not solved: CcKernelModule")
      set(CCOS_APPS_CCUSBDRIVER_ACTIVE 0)
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message("Disable CcUsbDriver")
      message("Dependency for CcUsbDriver not enabled but required: CcKernelModule")
     set(CCOS_APPS_CCUSBDRIVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  elseif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcUsbDriver not solved: CcKernelModule")
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcUsbDriver not enabled but required: CcKernelModule")
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcUsbDriver")
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Windows")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)

endif(WINDOWS)
################################################################################
# Config Check for cmake builds
################################################################################

# Setup basic include path
if(NOT CC_CURRENT_CONFIG_DIR)
  set(CC_CURRENT_CONFIG_DIR ${CMAKE_CURRENT_SOURCE_DIR})
endif(NOT CC_CURRENT_CONFIG_DIR)

if(LINUX)
  if(CcOS_FIND_COMPONENTS)
    set(CCOS_BUILDLEVEL 1)
    foreach(COMPONENT ${CcOS_FIND_COMPONENTS})
    if(${COMPONENT} STREQUAL "jpeg")
      set(CCOS_THIRDPARTY_JPEG_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "openssl")
      set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "mtp")
      set(CCOS_THIRDPARTY_MTP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "sqlite3")
      set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "wiringPi")
      set(CCOS_THIRDPARTY_WIRINGPI_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcModule")
      set(CCOS_CCMODULE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcKernel")
      set(CCOS_CCKERNEL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcKernelModule")
      set(CCOS_CCKERNELMODULE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "Raspbian")
      set(CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcTestModule")
      set(CCOS_MODULES_CCTESTMODULE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcScpi")
      set(CCOS_CCSCPI_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcSsl")
      set(CCOS_CCSSL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcFtp")
      set(CCOS_CCFTP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcShell")
      set(CCOS_CCSHELL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcTftp")
      set(CCOS_CCTFTP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcMqtt")
      set(CCOS_CCMQTT_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcMtp")
      set(CCOS_CCMTP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcDocuments")
      set(CCOS_CCDOCUMENTS_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcDhcp")
      set(CCOS_CCDHCP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcHttp")
      set(CCOS_CCHTTP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcMedia")
      set(CCOS_CCMEDIA_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcRemoteDevice")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcBitcoin")
      set(CCOS_CCBITCOIN_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcTesting")
      set(CCOS_CCTESTING_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcSql")
      set(CCOS_CCSQL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcOSBuildConfig")
      set(CCOS_CCOSBUILDCONFIG_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcAppInterfaces")
      set(CCOS_CCAPPINTERFACES_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcKernelModuleInterface")
      set(CCOS_CCKERNELMODULEINTERFACE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcDhcpServer")
      set(CCOS_APPS_CCDHCPSERVER_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcShellApp")
      set(CCOS_APPS_CCSHELLAPP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcScpiCli")
      set(CCOS_APPS_CCSCPICLI_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcHash")
      set(CCOS_APPS_CCHASH_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcKernelModuleTestDriver")
      set(CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcOSBuildConfigApp")
      set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcOSModuleLoader")
      set(CCOS_APPS_CCOSMODULELOADER_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcOSArgumentsApp")
      set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcOSResourceApp")
      set(CCOS_APPS_CCOSRESOURCEAPP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcRemoteDeviceServer")
      set(CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcRemoteDeviceClient")
      set(CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcUsbDriver")
      set(CCOS_APPS_CCUSBDRIVER_ACTIVE 4)
    endif()
    endforeach()
  endif()
  ################################################################################
  # jpeg
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
    set(CCOS_THIRDPARTY_JPEG_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
    set(CCOS_THIRDPARTY_JPEG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
    set(CCOS_THIRDPARTY_JPEG_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
    set(CCOS_THIRDPARTY_JPEG_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
    set(CCOS_THIRDPARTY_JPEG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/jpeg")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # openssl
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
    set(CCOS_THIRDPARTY_OPENSSL_VERSION 1.1.1.16)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
    set(CCOS_THIRDPARTY_OPENSSL_PREBUILD true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
    set(CCOS_THIRDPARTY_OPENSSL_STATIC true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
    set(CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCSSL_ACTIVE)
      if(${CCOS_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 2)
      endif(${CCOS_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSSL_ACTIVE)
  endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/openssl")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # mtp
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    set(CCOS_THIRDPARTY_MTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_MTP_VERSION)
    set(CCOS_THIRDPARTY_MTP_VERSION 1.1.10.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_MTP_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_MTP_PREBUILD)
    set(CCOS_THIRDPARTY_MTP_PREBUILD true)
  endif(NOT DEFINED CCOS_THIRDPARTY_MTP_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_MTP_STATIC)
    set(CCOS_THIRDPARTY_MTP_STATIC true)
  endif(NOT DEFINED CCOS_THIRDPARTY_MTP_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_MTP_STATICRUNTIME)
    set(CCOS_THIRDPARTY_MTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_MTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_MTP_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCMTP_ACTIVE)
      if(${CCOS_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_THIRDPARTY_MTP_ACTIVE 2)
      endif(${CCOS_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMTP_ACTIVE)
  endif(${CCOS_THIRDPARTY_MTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/mtp")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # sqlite3
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
    set(CCOS_THIRDPARTY_SQLITE3_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
    set(CCOS_THIRDPARTY_SQLITE3_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
    set(CCOS_THIRDPARTY_SQLITE3_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
    set(CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/sqlite3")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # wiringPi
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    set(CCOS_THIRDPARTY_WIRINGPI_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_WIRINGPI_VERSION)
    set(CCOS_THIRDPARTY_WIRINGPI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_WIRINGPI_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_WIRINGPI_PREBUILD)
    set(CCOS_THIRDPARTY_WIRINGPI_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_WIRINGPI_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_WIRINGPI_STATIC)
    set(CCOS_THIRDPARTY_WIRINGPI_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_WIRINGPI_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_WIRINGPI_STATICRUNTIME)
    set(CCOS_THIRDPARTY_WIRINGPI_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_WIRINGPI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/wiringPi")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcModule
  ################################################################################
  if(NOT DEFINED CCOS_CCMODULE_ACTIVE)
    set(CCOS_CCMODULE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCMODULE_VERSION)
    set(CCOS_CCMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMODULE_VERSION)
  if(NOT DEFINED CCOS_CCMODULE_PREBUILD)
    set(CCOS_CCMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCMODULE_STATIC)
    set(CCOS_CCMODULE_STATIC true)
  endif(NOT DEFINED CCOS_CCMODULE_STATIC)
  if(NOT DEFINED CCOS_CCMODULE_STATICRUNTIME)
    set(CCOS_CCMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCKERNEL_ACTIVE)
      if(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNEL_ACTIVE)
    if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCSCPI_ACTIVE)
      if(${CCOS_CCSCPI_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSCPI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSCPI_ACTIVE)
    if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
      if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(DEFINED CCOS_CCSSL_ACTIVE)
      if(${CCOS_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCFTP_ACTIVE)
      if(${CCOS_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCSHELL_ACTIVE)
      if(${CCOS_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSHELL_ACTIVE)
    if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
      if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(DEFINED CCOS_CCTFTP_ACTIVE)
      if(${CCOS_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCMQTT_ACTIVE)
      if(${CCOS_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCMTP_ACTIVE)
      if(${CCOS_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMTP_ACTIVE)
    if(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCDHCP_ACTIVE)
      if(${CCOS_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCHTTP_ACTIVE)
      if(${CCOS_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
      if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(DEFINED CCOS_CCTESTING_ACTIVE)
      if(${CCOS_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCSQL_ACTIVE)
      if(${CCOS_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSQL_ACTIVE)
    if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
      if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
      if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  endif(${CCOS_CCMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcModule")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcKernel
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    set(CCOS_CCKERNEL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNEL_VERSION)
    set(CCOS_CCKERNEL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNEL_VERSION)
  if(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
    set(CCOS_CCKERNEL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNEL_STATIC)
    set(CCOS_CCKERNEL_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNEL_STATIC)
  if(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
    set(CCOS_CCKERNEL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCSCPI_ACTIVE)
      if(${CCOS_CCSCPI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSCPI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSCPI_ACTIVE)
    if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
      if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(DEFINED CCOS_CCSSL_ACTIVE)
      if(${CCOS_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCFTP_ACTIVE)
      if(${CCOS_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCSHELL_ACTIVE)
      if(${CCOS_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSHELL_ACTIVE)
    if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
      if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(DEFINED CCOS_CCTFTP_ACTIVE)
      if(${CCOS_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCMQTT_ACTIVE)
      if(${CCOS_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCMTP_ACTIVE)
      if(${CCOS_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMTP_ACTIVE)
    if(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCDHCP_ACTIVE)
      if(${CCOS_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCHTTP_ACTIVE)
      if(${CCOS_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
      if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(DEFINED CCOS_CCTESTING_ACTIVE)
      if(${CCOS_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCSQL_ACTIVE)
      if(${CCOS_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSQL_ACTIVE)
    if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
      if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
      if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCMODULE_ACTIVE)
      message("Disable CcKernel")
      message("Dependency for CcKernel not solved: CcModule")
      set(CCOS_CCKERNEL_ACTIVE 0)
    elseif(${CCOS_CCMODULE_ACTIVE} EQUAL 0)
      message("Disable CcKernel")
      message("Dependency for CcKernel not enabled but required: CcModule")
     set(CCOS_CCKERNEL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCMODULE_ACTIVE)
  elseif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernel not solved: CcModule")
    elseif(${CCOS_CCMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernel not enabled but required: CcModule")
    endif(NOT DEFINED CCOS_CCMODULE_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernel")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcKernelModule
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    set(CCOS_CCKERNELMODULE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNELMODULE_VERSION)
    set(CCOS_CCKERNELMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_VERSION)
  if(NOT DEFINED CCOS_CCKERNELMODULE_PREBUILD)
    set(CCOS_CCKERNELMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNELMODULE_STATIC)
    set(CCOS_CCKERNELMODULE_STATIC true)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_STATIC)
  if(NOT DEFINED CCOS_CCKERNELMODULE_STATICRUNTIME)
    set(CCOS_CCKERNELMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_APPS_CCFS_ACTIVE)
      if(${CCOS_APPS_CCFS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
      if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
      if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
      if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
  endif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernelModule")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # Raspbian
  ################################################################################
  if(NOT DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    set(CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE 0)
  endif(NOT DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(NOT DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_VERSION)
    set(CCOS_MODULES_PLATFORM_RASPBIAN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_VERSION)
  if(NOT DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_PREBUILD)
    set(CCOS_MODULES_PLATFORM_RASPBIAN_PREBUILD false)
  endif(NOT DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_PREBUILD)
  if(NOT DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_STATIC)
    set(CCOS_MODULES_PLATFORM_RASPBIAN_STATIC true)
  endif(NOT DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_STATIC)
  if(NOT DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_STATICRUNTIME)
    set(CCOS_MODULES_PLATFORM_RASPBIAN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
  endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable Raspbian")
      message("Dependency for Raspbian not solved: CcKernel")
      set(CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable Raspbian")
      message("Dependency for Raspbian not enabled but required: CcKernel")
     set(CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for Raspbian not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for Raspbian not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Modules/Platform/Raspbian")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcTestModule
  ################################################################################
  if(NOT DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    set(CCOS_MODULES_CCTESTMODULE_ACTIVE 0)
  endif(NOT DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(NOT DEFINED CCOS_MODULES_CCTESTMODULE_VERSION)
    set(CCOS_MODULES_CCTESTMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_MODULES_CCTESTMODULE_VERSION)
  if(NOT DEFINED CCOS_MODULES_CCTESTMODULE_PREBUILD)
    set(CCOS_MODULES_CCTESTMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_MODULES_CCTESTMODULE_PREBUILD)
  if(NOT DEFINED CCOS_MODULES_CCTESTMODULE_STATIC)
    set(CCOS_MODULES_CCTESTMODULE_STATIC false)
  endif(NOT DEFINED CCOS_MODULES_CCTESTMODULE_STATIC)
  if(NOT DEFINED CCOS_MODULES_CCTESTMODULE_STATICRUNTIME)
    set(CCOS_MODULES_CCTESTMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_MODULES_CCTESTMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTestModule")
      message("Dependency for CcTestModule not solved: CcKernel")
      set(CCOS_MODULES_CCTESTMODULE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTestModule")
      message("Dependency for CcTestModule not enabled but required: CcKernel")
     set(CCOS_MODULES_CCTESTMODULE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTestModule not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTestModule not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Modules/CcTestModule")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcScpi
  ################################################################################
  if(NOT DEFINED CCOS_CCSCPI_ACTIVE)
    set(CCOS_CCSCPI_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCSCPI_ACTIVE)
  if(NOT DEFINED CCOS_CCSCPI_VERSION)
    set(CCOS_CCSCPI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCSCPI_VERSION)
  if(NOT DEFINED CCOS_CCSCPI_PREBUILD)
    set(CCOS_CCSCPI_PREBUILD false)
  endif(NOT DEFINED CCOS_CCSCPI_PREBUILD)
  if(NOT DEFINED CCOS_CCSCPI_STATIC)
    set(CCOS_CCSCPI_STATIC false)
  endif(NOT DEFINED CCOS_CCSCPI_STATIC)
  if(NOT DEFINED CCOS_CCSCPI_STATICRUNTIME)
    set(CCOS_CCSCPI_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCSCPI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
      if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
        set(CCOS_CCSCPI_ACTIVE 2)
      endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  endif(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcScpi")
      message("Dependency for CcScpi not solved: CcKernel")
      set(CCOS_CCSCPI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcScpi")
      message("Dependency for CcScpi not enabled but required: CcKernel")
     set(CCOS_CCSCPI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCSCPI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcScpi not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcScpi not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcScpi")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcSsl
  ################################################################################
  if(NOT DEFINED CCOS_CCSSL_ACTIVE)
    set(CCOS_CCSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCSSL_ACTIVE)
  if(NOT DEFINED CCOS_CCSSL_VERSION)
    set(CCOS_CCSSL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCSSL_VERSION)
  if(NOT DEFINED CCOS_CCSSL_PREBUILD)
    set(CCOS_CCSSL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCSSL_PREBUILD)
  if(NOT DEFINED CCOS_CCSSL_STATIC)
    set(CCOS_CCSSL_STATIC false)
  endif(NOT DEFINED CCOS_CCSSL_STATIC)
  if(NOT DEFINED CCOS_CCSSL_STATICRUNTIME)
    set(CCOS_CCSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCSSL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCSSL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCSSL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcSsl")
      message("Dependency for CcSsl not solved: CcKernel")
      set(CCOS_CCSSL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcSsl")
      message("Dependency for CcSsl not enabled but required: CcKernel")
     set(CCOS_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message("Disable CcSsl")
      message("Dependency for CcSsl not solved: openssl")
      set(CCOS_CCSSL_ACTIVE 0)
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message("Disable CcSsl")
      message("Dependency for CcSsl not enabled but required: openssl")
     set(CCOS_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  elseif(${CCOS_CCSSL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: openssl")
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: openssl")
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  endif(${CCOS_CCSSL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcSsl")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcFtp
  ################################################################################
  if(NOT DEFINED CCOS_CCFTP_ACTIVE)
    set(CCOS_CCFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCFTP_VERSION)
    set(CCOS_CCFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCFTP_VERSION)
  if(NOT DEFINED CCOS_CCFTP_PREBUILD)
    set(CCOS_CCFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCFTP_STATIC)
    set(CCOS_CCFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCFTP_STATIC)
  if(NOT DEFINED CCOS_CCFTP_STATICRUNTIME)
    set(CCOS_CCFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCFTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcFtp")
      message("Dependency for CcFtp not solved: CcKernel")
      set(CCOS_CCFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcFtp")
      message("Dependency for CcFtp not enabled but required: CcKernel")
     set(CCOS_CCFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcFtp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcFtp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCFTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcFtp")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcShell
  ################################################################################
  if(NOT DEFINED CCOS_CCSHELL_ACTIVE)
    set(CCOS_CCSHELL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCSHELL_ACTIVE)
  if(NOT DEFINED CCOS_CCSHELL_VERSION)
    set(CCOS_CCSHELL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCSHELL_VERSION)
  if(NOT DEFINED CCOS_CCSHELL_PREBUILD)
    set(CCOS_CCSHELL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCSHELL_PREBUILD)
  if(NOT DEFINED CCOS_CCSHELL_STATIC)
    set(CCOS_CCSHELL_STATIC false)
  endif(NOT DEFINED CCOS_CCSHELL_STATIC)
  if(NOT DEFINED CCOS_CCSHELL_STATICRUNTIME)
    set(CCOS_CCSHELL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCSHELL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCSHELL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
      if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
        set(CCOS_CCSHELL_ACTIVE 2)
      endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  endif(${CCOS_CCSHELL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCSHELL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcShell")
      message("Dependency for CcShell not solved: CcKernel")
      set(CCOS_CCSHELL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcShell")
      message("Dependency for CcShell not enabled but required: CcKernel")
     set(CCOS_CCSHELL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCSHELL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcShell not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcShell not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCSHELL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcShell")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcTftp
  ################################################################################
  if(NOT DEFINED CCOS_CCTFTP_ACTIVE)
    set(CCOS_CCTFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCTFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCTFTP_VERSION)
    set(CCOS_CCTFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCTFTP_VERSION)
  if(NOT DEFINED CCOS_CCTFTP_PREBUILD)
    set(CCOS_CCTFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCTFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCTFTP_STATIC)
    set(CCOS_CCTFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCTFTP_STATIC)
  if(NOT DEFINED CCOS_CCTFTP_STATICRUNTIME)
    set(CCOS_CCTFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCTFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCTFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCTFTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCTFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTftp")
      message("Dependency for CcTftp not solved: CcKernel")
      set(CCOS_CCTFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTftp")
      message("Dependency for CcTftp not enabled but required: CcKernel")
     set(CCOS_CCTFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCTFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTftp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTftp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCTFTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcTftp")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcMqtt
  ################################################################################
  if(NOT DEFINED CCOS_CCMQTT_ACTIVE)
    set(CCOS_CCMQTT_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMQTT_ACTIVE)
  if(NOT DEFINED CCOS_CCMQTT_VERSION)
    set(CCOS_CCMQTT_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMQTT_VERSION)
  if(NOT DEFINED CCOS_CCMQTT_PREBUILD)
    set(CCOS_CCMQTT_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMQTT_PREBUILD)
  if(NOT DEFINED CCOS_CCMQTT_STATIC)
    set(CCOS_CCMQTT_STATIC false)
  endif(NOT DEFINED CCOS_CCMQTT_STATIC)
  if(NOT DEFINED CCOS_CCMQTT_STATICRUNTIME)
    set(CCOS_CCMQTT_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMQTT_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not solved: CcKernel")
      set(CCOS_CCMQTT_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not enabled but required: CcKernel")
     set(CCOS_CCMQTT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMQTT_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMqtt not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMqtt not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcMqtt")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcMtp
  ################################################################################
  if(NOT DEFINED CCOS_CCMTP_ACTIVE)
    set(CCOS_CCMTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMTP_ACTIVE)
  if(NOT DEFINED CCOS_CCMTP_VERSION)
    set(CCOS_CCMTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMTP_VERSION)
  if(NOT DEFINED CCOS_CCMTP_PREBUILD)
    set(CCOS_CCMTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMTP_PREBUILD)
  if(NOT DEFINED CCOS_CCMTP_STATIC)
    set(CCOS_CCMTP_STATIC false)
  endif(NOT DEFINED CCOS_CCMTP_STATIC)
  if(NOT DEFINED CCOS_CCMTP_STATICRUNTIME)
    set(CCOS_CCMTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMtp")
      message("Dependency for CcMtp not solved: CcKernel")
      set(CCOS_CCMTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMtp")
      message("Dependency for CcMtp not enabled but required: CcKernel")
     set(CCOS_CCMTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
      message("Disable CcMtp")
      message("Dependency for CcMtp not solved: mtp")
      set(CCOS_CCMTP_ACTIVE 0)
    elseif(${CCOS_THIRDPARTY_MTP_ACTIVE} EQUAL 0)
      message("Disable CcMtp")
      message("Dependency for CcMtp not enabled but required: mtp")
     set(CCOS_CCMTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  elseif(${CCOS_CCMTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMtp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMtp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMtp not solved: mtp")
    elseif(${CCOS_THIRDPARTY_MTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMtp not enabled but required: mtp")
    endif(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  endif(${CCOS_CCMTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcMtp")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcDocuments
  ################################################################################
  if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    set(CCOS_CCDOCUMENTS_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  if(NOT DEFINED CCOS_CCDOCUMENTS_VERSION)
    set(CCOS_CCDOCUMENTS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_VERSION)
  if(NOT DEFINED CCOS_CCDOCUMENTS_PREBUILD)
    set(CCOS_CCDOCUMENTS_PREBUILD false)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_PREBUILD)
  if(NOT DEFINED CCOS_CCDOCUMENTS_STATIC)
    set(CCOS_CCDOCUMENTS_STATIC false)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_STATIC)
  if(NOT DEFINED CCOS_CCDOCUMENTS_STATICRUNTIME)
    set(CCOS_CCDOCUMENTS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCDHCP_ACTIVE)
      if(${CCOS_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCHTTP_ACTIVE)
      if(${CCOS_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
      if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  endif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not solved: CcKernel")
      set(CCOS_CCDOCUMENTS_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not enabled but required: CcKernel")
     set(CCOS_CCDOCUMENTS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDocuments not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDocuments not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcDocuments")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcDhcp
  ################################################################################
  if(NOT DEFINED CCOS_CCDHCP_ACTIVE)
    set(CCOS_CCDHCP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCDHCP_ACTIVE)
  if(NOT DEFINED CCOS_CCDHCP_VERSION)
    set(CCOS_CCDHCP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCDHCP_VERSION)
  if(NOT DEFINED CCOS_CCDHCP_PREBUILD)
    set(CCOS_CCDHCP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCDHCP_PREBUILD)
  if(NOT DEFINED CCOS_CCDHCP_STATIC)
    set(CCOS_CCDHCP_STATIC false)
  endif(NOT DEFINED CCOS_CCDHCP_STATIC)
  if(NOT DEFINED CCOS_CCDHCP_STATICRUNTIME)
    set(CCOS_CCDHCP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCDHCP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcKernel")
      set(CCOS_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcKernel")
     set(CCOS_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcDocuments")
      set(CCOS_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcDocuments")
     set(CCOS_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcDhcp")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcHttp
  ################################################################################
  if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
    set(CCOS_CCHTTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  if(NOT DEFINED CCOS_CCHTTP_VERSION)
    set(CCOS_CCHTTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCHTTP_VERSION)
  if(NOT DEFINED CCOS_CCHTTP_PREBUILD)
    set(CCOS_CCHTTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCHTTP_PREBUILD)
  if(NOT DEFINED CCOS_CCHTTP_STATIC)
    set(CCOS_CCHTTP_STATIC false)
  endif(NOT DEFINED CCOS_CCHTTP_STATIC)
  if(NOT DEFINED CCOS_CCHTTP_STATICRUNTIME)
    set(CCOS_CCHTTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCHTTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
  endif(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcKernel")
      set(CCOS_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcKernel")
     set(CCOS_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcDocuments")
      set(CCOS_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcDocuments")
     set(CCOS_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcHttp")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcMedia
  ################################################################################
  if(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
    set(CCOS_CCMEDIA_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
  if(NOT DEFINED CCOS_CCMEDIA_VERSION)
    set(CCOS_CCMEDIA_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMEDIA_VERSION)
  if(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
    set(CCOS_CCMEDIA_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
  if(NOT DEFINED CCOS_CCMEDIA_STATIC)
    set(CCOS_CCMEDIA_STATIC true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATIC)
  if(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
    set(CCOS_CCMEDIA_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMedia")
      message("Dependency for CcMedia not solved: CcKernel")
      set(CCOS_CCMEDIA_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMedia")
      message("Dependency for CcMedia not enabled but required: CcKernel")
     set(CCOS_CCMEDIA_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message("Disable CcMedia")
      message("Dependency for CcMedia not solved: CcHttp")
      set(CCOS_CCMEDIA_ACTIVE 0)
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcMedia")
      message("Dependency for CcMedia not enabled but required: CcHttp")
     set(CCOS_CCMEDIA_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  elseif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMedia not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMedia not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMedia not solved: CcHttp")
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMedia not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcMedia")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcRemoteDevice
  ################################################################################
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    set(CCOS_CCREMOTEDEVICE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_VERSION)
    set(CCOS_CCREMOTEDEVICE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_VERSION)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_PREBUILD)
    set(CCOS_CCREMOTEDEVICE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_PREBUILD)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_STATIC)
    set(CCOS_CCREMOTEDEVICE_STATIC false)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_STATIC)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_STATICRUNTIME)
    set(CCOS_CCREMOTEDEVICE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcKernel")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcKernel")
     set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcDocuments")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcDocuments")
     set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcHttp")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcHttp")
     set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcHttp")
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  endif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcRemoteDevice")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcBitcoin
  ################################################################################
  if(NOT DEFINED CCOS_CCBITCOIN_ACTIVE)
    set(CCOS_CCBITCOIN_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCBITCOIN_ACTIVE)
  if(NOT DEFINED CCOS_CCBITCOIN_VERSION)
    set(CCOS_CCBITCOIN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCBITCOIN_VERSION)
  if(NOT DEFINED CCOS_CCBITCOIN_PREBUILD)
    set(CCOS_CCBITCOIN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCBITCOIN_PREBUILD)
  if(NOT DEFINED CCOS_CCBITCOIN_STATIC)
    set(CCOS_CCBITCOIN_STATIC false)
  endif(NOT DEFINED CCOS_CCBITCOIN_STATIC)
  if(NOT DEFINED CCOS_CCBITCOIN_STATICRUNTIME)
    set(CCOS_CCBITCOIN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCBITCOIN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcKernel")
      set(CCOS_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcKernel")
     set(CCOS_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcDocuments")
      set(CCOS_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcDocuments")
     set(CCOS_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcHttp")
      set(CCOS_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcHttp")
     set(CCOS_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  elseif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcHttp")
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  endif(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcBitcoin")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcTesting
  ################################################################################
  if(NOT DEFINED CCOS_CCTESTING_ACTIVE)
    set(CCOS_CCTESTING_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCTESTING_ACTIVE)
  if(NOT DEFINED CCOS_CCTESTING_VERSION)
    set(CCOS_CCTESTING_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCTESTING_VERSION)
  if(NOT DEFINED CCOS_CCTESTING_PREBUILD)
    set(CCOS_CCTESTING_PREBUILD false)
  endif(NOT DEFINED CCOS_CCTESTING_PREBUILD)
  if(NOT DEFINED CCOS_CCTESTING_STATIC)
    set(CCOS_CCTESTING_STATIC false)
  endif(NOT DEFINED CCOS_CCTESTING_STATIC)
  if(NOT DEFINED CCOS_CCTESTING_STATICRUNTIME)
    set(CCOS_CCTESTING_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCTESTING_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
  endif(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTesting")
      message("Dependency for CcTesting not solved: CcKernel")
      set(CCOS_CCTESTING_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTesting")
      message("Dependency for CcTesting not enabled but required: CcKernel")
     set(CCOS_CCTESTING_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCTESTING_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTesting not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTesting not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcTesting")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcSql
  ################################################################################
  if(NOT DEFINED CCOS_CCSQL_ACTIVE)
    set(CCOS_CCSQL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCSQL_ACTIVE)
  if(NOT DEFINED CCOS_CCSQL_VERSION)
    set(CCOS_CCSQL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCSQL_VERSION)
  if(NOT DEFINED CCOS_CCSQL_PREBUILD)
    set(CCOS_CCSQL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCSQL_PREBUILD)
  if(NOT DEFINED CCOS_CCSQL_STATIC)
    set(CCOS_CCSQL_STATIC false)
  endif(NOT DEFINED CCOS_CCSQL_STATIC)
  if(NOT DEFINED CCOS_CCSQL_STATICRUNTIME)
    set(CCOS_CCSQL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCSQL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCSQL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCSQL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCSQL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcSql")
      message("Dependency for CcSql not solved: CcKernel")
      set(CCOS_CCSQL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcSql")
      message("Dependency for CcSql not enabled but required: CcKernel")
     set(CCOS_CCSQL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCSQL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSql not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSql not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCSQL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcSql")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcOSBuildConfig
  ################################################################################
  if(NOT DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    set(CCOS_CCOSBUILDCONFIG_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(NOT DEFINED CCOS_CCOSBUILDCONFIG_VERSION)
    set(CCOS_CCOSBUILDCONFIG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCOSBUILDCONFIG_VERSION)
  if(NOT DEFINED CCOS_CCOSBUILDCONFIG_PREBUILD)
    set(CCOS_CCOSBUILDCONFIG_PREBUILD false)
  endif(NOT DEFINED CCOS_CCOSBUILDCONFIG_PREBUILD)
  if(NOT DEFINED CCOS_CCOSBUILDCONFIG_STATIC)
    set(CCOS_CCOSBUILDCONFIG_STATIC false)
  endif(NOT DEFINED CCOS_CCOSBUILDCONFIG_STATIC)
  if(NOT DEFINED CCOS_CCOSBUILDCONFIG_STATICRUNTIME)
    set(CCOS_CCOSBUILDCONFIG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCOSBUILDCONFIG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcKernel")
      set(CCOS_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcKernel")
     set(CCOS_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcDocuments")
      set(CCOS_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
     set(CCOS_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcOSBuildConfig")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcAppInterfaces
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    set(CCOS_CCAPPINTERFACES_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPINTERFACES_VERSION)
    set(CCOS_CCAPPINTERFACES_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPINTERFACES_VERSION)
  if(NOT DEFINED CCOS_CCAPPINTERFACES_PREBUILD)
    set(CCOS_CCAPPINTERFACES_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPINTERFACES_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPINTERFACES_STATIC)
    set(CCOS_CCAPPINTERFACES_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPINTERFACES_STATIC)
  if(NOT DEFINED CCOS_CCAPPINTERFACES_STATICRUNTIME)
    set(CCOS_CCAPPINTERFACES_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCAPPINTERFACES_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPINTERFACES_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcAppInterfaces")
      message("Dependency for CcAppInterfaces not solved: CcKernel")
      set(CCOS_CCAPPINTERFACES_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcAppInterfaces")
      message("Dependency for CcAppInterfaces not enabled but required: CcKernel")
     set(CCOS_CCAPPINTERFACES_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcAppInterfaces not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcAppInterfaces not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcAppInterfaces")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcKernelModuleInterface
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    set(CCOS_CCKERNELMODULEINTERFACE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_VERSION)
    set(CCOS_CCKERNELMODULEINTERFACE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_VERSION)
  if(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_PREBUILD)
    set(CCOS_CCKERNELMODULEINTERFACE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_STATIC)
    set(CCOS_CCKERNELMODULEINTERFACE_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_STATIC)
  if(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_STATICRUNTIME)
    set(CCOS_CCKERNELMODULEINTERFACE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNELMODULEINTERFACE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcKernelModuleInterface")
      message("Dependency for CcKernelModuleInterface not solved: CcKernel")
      set(CCOS_CCKERNELMODULEINTERFACE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcKernelModuleInterface")
      message("Dependency for CcKernelModuleInterface not enabled but required: CcKernel")
     set(CCOS_CCKERNELMODULEINTERFACE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernelModuleInterface not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernelModuleInterface not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernelModuleInterface")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcDhcpServer
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
    set(CCOS_APPS_CCDHCPSERVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_VERSION)
    set(CCOS_APPS_CCDHCPSERVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_PREBUILD)
    set(CCOS_APPS_CCDHCPSERVER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATIC)
    set(CCOS_APPS_CCDHCPSERVER_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATICRUNTIME)
    set(CCOS_APPS_CCDHCPSERVER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDhcpServer")
      message("Dependency for CcDhcpServer not solved: CcKernel")
      set(CCOS_APPS_CCDHCPSERVER_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDhcpServer")
      message("Dependency for CcDhcpServer not enabled but required: CcKernel")
     set(CCOS_APPS_CCDHCPSERVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcpServer not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcpServer not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcDhcpServer")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcShellApp
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    set(CCOS_APPS_CCSHELLAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCSHELLAPP_VERSION)
    set(CCOS_APPS_CCSHELLAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCSHELLAPP_VERSION)
  if(NOT DEFINED CCOS_APPS_CCSHELLAPP_PREBUILD)
    set(CCOS_APPS_CCSHELLAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCSHELLAPP_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCSHELLAPP_STATIC)
    set(CCOS_APPS_CCSHELLAPP_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCSHELLAPP_STATIC)
  if(NOT DEFINED CCOS_APPS_CCSHELLAPP_STATICRUNTIME)
    set(CCOS_APPS_CCSHELLAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCSHELLAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCSHELLAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCSHELLAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcShellApp")
      message("Dependency for CcShellApp not solved: CcKernel")
      set(CCOS_APPS_CCSHELLAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcShellApp")
      message("Dependency for CcShellApp not enabled but required: CcKernel")
     set(CCOS_APPS_CCSHELLAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCSHELL_ACTIVE)
      message("Disable CcShellApp")
      message("Dependency for CcShellApp not solved: CcShell")
      set(CCOS_APPS_CCSHELLAPP_ACTIVE 0)
    elseif(${CCOS_CCSHELL_ACTIVE} EQUAL 0)
      message("Disable CcShellApp")
      message("Dependency for CcShellApp not enabled but required: CcShell")
     set(CCOS_APPS_CCSHELLAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCSHELL_ACTIVE)
  elseif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcShellApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcShellApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCSHELL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcShellApp not solved: CcShell")
    elseif(${CCOS_CCSHELL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcShellApp not enabled but required: CcShell")
    endif(NOT DEFINED CCOS_CCSHELL_ACTIVE)
  endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcShellApp")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcScpiCli
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    set(CCOS_APPS_CCSCPICLI_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCSCPICLI_VERSION)
    set(CCOS_APPS_CCSCPICLI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCSCPICLI_VERSION)
  if(NOT DEFINED CCOS_APPS_CCSCPICLI_PREBUILD)
    set(CCOS_APPS_CCSCPICLI_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCSCPICLI_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCSCPICLI_STATIC)
    set(CCOS_APPS_CCSCPICLI_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCSCPICLI_STATIC)
  if(NOT DEFINED CCOS_APPS_CCSCPICLI_STATICRUNTIME)
    set(CCOS_APPS_CCSCPICLI_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCSCPICLI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCSCPICLI_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCSCPICLI_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCSCPICLI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcScpiCli")
      message("Dependency for CcScpiCli not solved: CcKernel")
      set(CCOS_APPS_CCSCPICLI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcScpiCli")
      message("Dependency for CcScpiCli not enabled but required: CcKernel")
     set(CCOS_APPS_CCSCPICLI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCSCPI_ACTIVE)
      message("Disable CcScpiCli")
      message("Dependency for CcScpiCli not solved: CcScpi")
      set(CCOS_APPS_CCSCPICLI_ACTIVE 0)
    elseif(${CCOS_CCSCPI_ACTIVE} EQUAL 0)
      message("Disable CcScpiCli")
      message("Dependency for CcScpiCli not enabled but required: CcScpi")
     set(CCOS_APPS_CCSCPICLI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCSCPI_ACTIVE)
  elseif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcScpiCli not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcScpiCli not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCSCPI_ACTIVE)
      message(FATAL_ERROR "Dependency for CcScpiCli not solved: CcScpi")
    elseif(${CCOS_CCSCPI_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcScpiCli not enabled but required: CcScpi")
    endif(NOT DEFINED CCOS_CCSCPI_ACTIVE)
  endif(${CCOS_APPS_CCSCPICLI_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcScpiCli")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcHash
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCHASH_ACTIVE)
    set(CCOS_APPS_CCHASH_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCHASH_VERSION)
    set(CCOS_APPS_CCHASH_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCHASH_VERSION)
  if(NOT DEFINED CCOS_APPS_CCHASH_PREBUILD)
    set(CCOS_APPS_CCHASH_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCHASH_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCHASH_STATIC)
    set(CCOS_APPS_CCHASH_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCHASH_STATIC)
  if(NOT DEFINED CCOS_APPS_CCHASH_STATICRUNTIME)
    set(CCOS_APPS_CCHASH_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCHASH_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCHASH_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCHASH_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCHASH_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcHash")
      message("Dependency for CcHash not solved: CcKernel")
      set(CCOS_APPS_CCHASH_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcHash")
      message("Dependency for CcHash not enabled but required: CcKernel")
     set(CCOS_APPS_CCHASH_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHash not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHash not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_APPS_CCHASH_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcHash")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcKernelModuleTestDriver
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    set(CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_VERSION)
    set(CCOS_APPS_CCKERNELMODULETESTDRIVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_PREBUILD)
    set(CCOS_APPS_CCKERNELMODULETESTDRIVER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_STATIC)
    set(CCOS_APPS_CCKERNELMODULETESTDRIVER_STATIC true)
  endif(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME)
    set(CCOS_APPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message("Disable CcKernelModuleTestDriver")
      message("Dependency for CcKernelModuleTestDriver not solved: CcKernelModule")
      set(CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE 0)
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message("Disable CcKernelModuleTestDriver")
      message("Dependency for CcKernelModuleTestDriver not enabled but required: CcKernelModule")
     set(CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  elseif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernelModuleTestDriver not solved: CcKernelModule")
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernelModuleTestDriver not enabled but required: CcKernelModule")
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcKernelModuleTestDriver")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcOSBuildConfigApp
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_VERSION)
    set(CCOS_APPS_CCOSBUILDCONFIGAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_VERSION)
  if(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_PREBUILD)
    set(CCOS_APPS_CCOSBUILDCONFIGAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_STATIC)
    set(CCOS_APPS_CCOSBUILDCONFIGAPP_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_STATIC)
  if(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
    set(CCOS_APPS_CCOSBUILDCONFIGAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcKernel")
      set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
     set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcDocuments")
      set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
     set(CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcOSBuildConfigApp")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcOSModuleLoader
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    set(CCOS_APPS_CCOSMODULELOADER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_VERSION)
    set(CCOS_APPS_CCOSMODULELOADER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_PREBUILD)
    set(CCOS_APPS_CCOSMODULELOADER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_STATIC)
    set(CCOS_APPS_CCOSMODULELOADER_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_STATICRUNTIME)
    set(CCOS_APPS_CCOSMODULELOADER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCOSMODULELOADER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSModuleLoader")
      message("Dependency for CcOSModuleLoader not solved: CcKernel")
      set(CCOS_APPS_CCOSMODULELOADER_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSModuleLoader")
      message("Dependency for CcOSModuleLoader not enabled but required: CcKernel")
     set(CCOS_APPS_CCOSMODULELOADER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSModuleLoader not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSModuleLoader not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcOSModuleLoader")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcOSArgumentsApp
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_VERSION)
    set(CCOS_APPS_CCOSARGUMENTSAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_VERSION)
  if(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_PREBUILD)
    set(CCOS_APPS_CCOSARGUMENTSAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_STATIC)
    set(CCOS_APPS_CCOSARGUMENTSAPP_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_STATIC)
  if(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_STATICRUNTIME)
    set(CCOS_APPS_CCOSARGUMENTSAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCOSARGUMENTSAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSArgumentsApp")
      message("Dependency for CcOSArgumentsApp not solved: CcKernel")
      set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSArgumentsApp")
      message("Dependency for CcOSArgumentsApp not enabled but required: CcKernel")
     set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcOSArgumentsApp")
      message("Dependency for CcOSArgumentsApp not solved: CcDocuments")
      set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcOSArgumentsApp")
      message("Dependency for CcOSArgumentsApp not enabled but required: CcDocuments")
     set(CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSArgumentsApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSArgumentsApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSArgumentsApp not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSArgumentsApp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcOSArgumentsApp")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcOSResourceApp
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    set(CCOS_APPS_CCOSRESOURCEAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_VERSION)
    set(CCOS_APPS_CCOSRESOURCEAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_VERSION)
  if(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_PREBUILD)
    set(CCOS_APPS_CCOSRESOURCEAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_STATIC)
    set(CCOS_APPS_CCOSRESOURCEAPP_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_STATIC)
  if(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_STATICRUNTIME)
    set(CCOS_APPS_CCOSRESOURCEAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCOSRESOURCEAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSResourceApp")
      message("Dependency for CcOSResourceApp not solved: CcKernel")
      set(CCOS_APPS_CCOSRESOURCEAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSResourceApp")
      message("Dependency for CcOSResourceApp not enabled but required: CcKernel")
     set(CCOS_APPS_CCOSRESOURCEAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSResourceApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSResourceApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcOSResourceApp")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcRemoteDeviceServer
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    set(CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_VERSION)
    set(CCOS_APPS_CCREMOTEDEVICESERVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_PREBUILD)
    set(CCOS_APPS_CCREMOTEDEVICESERVER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_STATIC)
    set(CCOS_APPS_CCREMOTEDEVICESERVER_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_STATICRUNTIME)
    set(CCOS_APPS_CCREMOTEDEVICESERVER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      message("Disable CcRemoteDeviceServer")
      message("Dependency for CcRemoteDeviceServer not solved: CcRemoteDevice")
      set(CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE 0)
    elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDeviceServer")
      message("Dependency for CcRemoteDeviceServer not enabled but required: CcRemoteDevice")
     set(CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  elseif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceServer not solved: CcRemoteDevice")
    elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceServer not enabled but required: CcRemoteDevice")
    endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcRemoteDeviceServer")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcRemoteDeviceClient
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    set(CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_VERSION)
    set(CCOS_APPS_CCREMOTEDEVICECLIENT_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_VERSION)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_PREBUILD)
    set(CCOS_APPS_CCREMOTEDEVICECLIENT_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_STATIC)
    set(CCOS_APPS_CCREMOTEDEVICECLIENT_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_STATIC)
  if(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_STATICRUNTIME)
    set(CCOS_APPS_CCREMOTEDEVICECLIENT_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not solved: CcRemoteDevice")
      set(CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not enabled but required: CcRemoteDevice")
     set(CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  elseif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not solved: CcRemoteDevice")
    elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not enabled but required: CcRemoteDevice")
    endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcRemoteDeviceClient")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcUsbDriver
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    set(CCOS_APPS_CCUSBDRIVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCUSBDRIVER_VERSION)
    set(CCOS_APPS_CCUSBDRIVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCUSBDRIVER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCUSBDRIVER_PREBUILD)
    set(CCOS_APPS_CCUSBDRIVER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCUSBDRIVER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCUSBDRIVER_STATIC)
    set(CCOS_APPS_CCUSBDRIVER_STATIC true)
  endif(NOT DEFINED CCOS_APPS_CCUSBDRIVER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCUSBDRIVER_STATICRUNTIME)
    set(CCOS_APPS_CCUSBDRIVER_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_APPS_CCUSBDRIVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message("Disable CcUsbDriver")
      message("Dependency for CcUsbDriver not solved: CcKernelModule")
      set(CCOS_APPS_CCUSBDRIVER_ACTIVE 0)
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message("Disable CcUsbDriver")
      message("Dependency for CcUsbDriver not enabled but required: CcKernelModule")
     set(CCOS_APPS_CCUSBDRIVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  elseif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcUsbDriver not solved: CcKernelModule")
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcUsbDriver not enabled but required: CcKernelModule")
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcUsbDriver")
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)

endif(LINUX)
################################################################################
# Config Check for cmake builds
################################################################################

# Setup basic include path
if(NOT CC_CURRENT_CONFIG_DIR)
  set(CC_CURRENT_CONFIG_DIR ${CMAKE_CURRENT_SOURCE_DIR})
endif(NOT CC_CURRENT_CONFIG_DIR)

if(GENERIC)
  if(CcOS_FIND_COMPONENTS)
    set(CCOS_BUILDLEVEL 1)
    foreach(COMPONENT ${CcOS_FIND_COMPONENTS})
    if(${COMPONENT} STREQUAL "jpeg")
      set(CCOS_THIRDPARTY_JPEG_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcModule")
      set(CCOS_CCMODULE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcKernel")
      set(CCOS_CCKERNEL_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcScpi")
      set(CCOS_CCSCPI_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcMqtt")
      set(CCOS_CCMQTT_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcDocuments")
      set(CCOS_CCDOCUMENTS_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcDhcp")
      set(CCOS_CCDHCP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcTesting")
      set(CCOS_CCTESTING_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcDhcpServer")
      set(CCOS_APPS_CCDHCPSERVER_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcHttp")
      set(CCOS_CCHTTP_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcRemoteDevice")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 4)
    endif()
    if(${COMPONENT} STREQUAL "CcBitcoin")
      set(CCOS_CCBITCOIN_ACTIVE 4)
    endif()
    endforeach()
  endif()
  ################################################################################
  # jpeg
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
    set(CCOS_THIRDPARTY_JPEG_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
    set(CCOS_THIRDPARTY_JPEG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
    set(CCOS_THIRDPARTY_JPEG_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
    set(CCOS_THIRDPARTY_JPEG_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
    set(CCOS_THIRDPARTY_JPEG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/jpeg")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcModule
  ################################################################################
  if(NOT DEFINED CCOS_CCMODULE_ACTIVE)
    set(CCOS_CCMODULE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCMODULE_VERSION)
    set(CCOS_CCMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMODULE_VERSION)
  if(NOT DEFINED CCOS_CCMODULE_PREBUILD)
    set(CCOS_CCMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCMODULE_STATIC)
    set(CCOS_CCMODULE_STATIC true)
  endif(NOT DEFINED CCOS_CCMODULE_STATIC)
  if(NOT DEFINED CCOS_CCMODULE_STATICRUNTIME)
    set(CCOS_CCMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCKERNEL_ACTIVE)
      if(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNEL_ACTIVE)
    if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCSCPI_ACTIVE)
      if(${CCOS_CCSCPI_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSCPI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSCPI_ACTIVE)
    if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
      if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(DEFINED CCOS_CCSSL_ACTIVE)
      if(${CCOS_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCFTP_ACTIVE)
      if(${CCOS_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCSHELL_ACTIVE)
      if(${CCOS_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSHELL_ACTIVE)
    if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
      if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(DEFINED CCOS_CCTFTP_ACTIVE)
      if(${CCOS_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCMQTT_ACTIVE)
      if(${CCOS_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCMTP_ACTIVE)
      if(${CCOS_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMTP_ACTIVE)
    if(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCDHCP_ACTIVE)
      if(${CCOS_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCHTTP_ACTIVE)
      if(${CCOS_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
      if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(DEFINED CCOS_CCTESTING_ACTIVE)
      if(${CCOS_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCSQL_ACTIVE)
      if(${CCOS_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSQL_ACTIVE)
    if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
      if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
      if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULE_ACTIVE 2)
      endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  endif(${CCOS_CCMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcModule")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcKernel
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    set(CCOS_CCKERNEL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNEL_VERSION)
    set(CCOS_CCKERNEL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNEL_VERSION)
  if(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
    set(CCOS_CCKERNEL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNEL_STATIC)
    set(CCOS_CCKERNEL_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNEL_STATIC)
  if(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
    set(CCOS_CCKERNEL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCSCPI_ACTIVE)
      if(${CCOS_CCSCPI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSCPI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSCPI_ACTIVE)
    if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
      if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(DEFINED CCOS_CCSSL_ACTIVE)
      if(${CCOS_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCFTP_ACTIVE)
      if(${CCOS_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCSHELL_ACTIVE)
      if(${CCOS_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSHELL_ACTIVE)
    if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
      if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(DEFINED CCOS_CCTFTP_ACTIVE)
      if(${CCOS_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCMQTT_ACTIVE)
      if(${CCOS_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCMTP_ACTIVE)
      if(${CCOS_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMTP_ACTIVE)
    if(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCDHCP_ACTIVE)
      if(${CCOS_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCHTTP_ACTIVE)
      if(${CCOS_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
      if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(DEFINED CCOS_CCTESTING_ACTIVE)
      if(${CCOS_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCSQL_ACTIVE)
      if(${CCOS_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCSQL_ACTIVE)
    if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
      if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
      if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCMODULE_ACTIVE)
      message("Disable CcKernel")
      message("Dependency for CcKernel not solved: CcModule")
      set(CCOS_CCKERNEL_ACTIVE 0)
    elseif(${CCOS_CCMODULE_ACTIVE} EQUAL 0)
      message("Disable CcKernel")
      message("Dependency for CcKernel not enabled but required: CcModule")
     set(CCOS_CCKERNEL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCMODULE_ACTIVE)
  elseif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernel not solved: CcModule")
    elseif(${CCOS_CCMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernel not enabled but required: CcModule")
    endif(NOT DEFINED CCOS_CCMODULE_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernel")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcScpi
  ################################################################################
  if(NOT DEFINED CCOS_CCSCPI_ACTIVE)
    set(CCOS_CCSCPI_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCSCPI_ACTIVE)
  if(NOT DEFINED CCOS_CCSCPI_VERSION)
    set(CCOS_CCSCPI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCSCPI_VERSION)
  if(NOT DEFINED CCOS_CCSCPI_PREBUILD)
    set(CCOS_CCSCPI_PREBUILD false)
  endif(NOT DEFINED CCOS_CCSCPI_PREBUILD)
  if(NOT DEFINED CCOS_CCSCPI_STATIC)
    set(CCOS_CCSCPI_STATIC false)
  endif(NOT DEFINED CCOS_CCSCPI_STATIC)
  if(NOT DEFINED CCOS_CCSCPI_STATICRUNTIME)
    set(CCOS_CCSCPI_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCSCPI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
      if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
        set(CCOS_CCSCPI_ACTIVE 2)
      endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  endif(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcScpi")
      message("Dependency for CcScpi not solved: CcKernel")
      set(CCOS_CCSCPI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcScpi")
      message("Dependency for CcScpi not enabled but required: CcKernel")
     set(CCOS_CCSCPI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCSCPI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcScpi not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcScpi not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCSCPI_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcScpi")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcMqtt
  ################################################################################
  if(NOT DEFINED CCOS_CCMQTT_ACTIVE)
    set(CCOS_CCMQTT_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMQTT_ACTIVE)
  if(NOT DEFINED CCOS_CCMQTT_VERSION)
    set(CCOS_CCMQTT_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMQTT_VERSION)
  if(NOT DEFINED CCOS_CCMQTT_PREBUILD)
    set(CCOS_CCMQTT_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMQTT_PREBUILD)
  if(NOT DEFINED CCOS_CCMQTT_STATIC)
    set(CCOS_CCMQTT_STATIC false)
  endif(NOT DEFINED CCOS_CCMQTT_STATIC)
  if(NOT DEFINED CCOS_CCMQTT_STATICRUNTIME)
    set(CCOS_CCMQTT_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMQTT_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not solved: CcKernel")
      set(CCOS_CCMQTT_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not enabled but required: CcKernel")
     set(CCOS_CCMQTT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMQTT_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMqtt not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMqtt not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMQTT_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcMqtt")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcDocuments
  ################################################################################
  if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    set(CCOS_CCDOCUMENTS_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  if(NOT DEFINED CCOS_CCDOCUMENTS_VERSION)
    set(CCOS_CCDOCUMENTS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_VERSION)
  if(NOT DEFINED CCOS_CCDOCUMENTS_PREBUILD)
    set(CCOS_CCDOCUMENTS_PREBUILD false)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_PREBUILD)
  if(NOT DEFINED CCOS_CCDOCUMENTS_STATIC)
    set(CCOS_CCDOCUMENTS_STATIC false)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_STATIC)
  if(NOT DEFINED CCOS_CCDOCUMENTS_STATICRUNTIME)
    set(CCOS_CCDOCUMENTS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCDOCUMENTS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCDHCP_ACTIVE)
      if(${CCOS_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCHTTP_ACTIVE)
      if(${CCOS_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
      if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
        set(CCOS_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  endif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not solved: CcKernel")
      set(CCOS_CCDOCUMENTS_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not enabled but required: CcKernel")
     set(CCOS_CCDOCUMENTS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCDOCUMENTS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDocuments not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDocuments not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcDocuments")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcDhcp
  ################################################################################
  if(NOT DEFINED CCOS_CCDHCP_ACTIVE)
    set(CCOS_CCDHCP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCDHCP_ACTIVE)
  if(NOT DEFINED CCOS_CCDHCP_VERSION)
    set(CCOS_CCDHCP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCDHCP_VERSION)
  if(NOT DEFINED CCOS_CCDHCP_PREBUILD)
    set(CCOS_CCDHCP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCDHCP_PREBUILD)
  if(NOT DEFINED CCOS_CCDHCP_STATIC)
    set(CCOS_CCDHCP_STATIC false)
  endif(NOT DEFINED CCOS_CCDHCP_STATIC)
  if(NOT DEFINED CCOS_CCDHCP_STATICRUNTIME)
    set(CCOS_CCDHCP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCDHCP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcKernel")
      set(CCOS_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcKernel")
     set(CCOS_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcDocuments")
      set(CCOS_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcDocuments")
     set(CCOS_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCDHCP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCDHCP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcDhcp")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcTesting
  ################################################################################
  if(NOT DEFINED CCOS_CCTESTING_ACTIVE)
    set(CCOS_CCTESTING_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCTESTING_ACTIVE)
  if(NOT DEFINED CCOS_CCTESTING_VERSION)
    set(CCOS_CCTESTING_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCTESTING_VERSION)
  if(NOT DEFINED CCOS_CCTESTING_PREBUILD)
    set(CCOS_CCTESTING_PREBUILD false)
  endif(NOT DEFINED CCOS_CCTESTING_PREBUILD)
  if(NOT DEFINED CCOS_CCTESTING_STATIC)
    set(CCOS_CCTESTING_STATIC false)
  endif(NOT DEFINED CCOS_CCTESTING_STATIC)
  if(NOT DEFINED CCOS_CCTESTING_STATICRUNTIME)
    set(CCOS_CCTESTING_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCTESTING_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
  endif(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTesting")
      message("Dependency for CcTesting not solved: CcKernel")
      set(CCOS_CCTESTING_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTesting")
      message("Dependency for CcTesting not enabled but required: CcKernel")
     set(CCOS_CCTESTING_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCTESTING_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTesting not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTesting not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCTESTING_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcTesting")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcDhcpServer
  ################################################################################
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
    set(CCOS_APPS_CCDHCPSERVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_ACTIVE)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_VERSION)
    set(CCOS_APPS_CCDHCPSERVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_VERSION)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_PREBUILD)
    set(CCOS_APPS_CCDHCPSERVER_PREBUILD false)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_PREBUILD)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATIC)
    set(CCOS_APPS_CCDHCPSERVER_STATIC false)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATIC)
  if(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATICRUNTIME)
    set(CCOS_APPS_CCDHCPSERVER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_APPS_CCDHCPSERVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
  endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDhcpServer")
      message("Dependency for CcDhcpServer not solved: CcKernel")
      set(CCOS_APPS_CCDHCPSERVER_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDhcpServer")
      message("Dependency for CcDhcpServer not enabled but required: CcKernel")
     set(CCOS_APPS_CCDHCPSERVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcpServer not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcpServer not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_APPS_CCDHCPSERVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/Apps/CcDhcpServer")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcHttp
  ################################################################################
  if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
    set(CCOS_CCHTTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  if(NOT DEFINED CCOS_CCHTTP_VERSION)
    set(CCOS_CCHTTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCHTTP_VERSION)
  if(NOT DEFINED CCOS_CCHTTP_PREBUILD)
    set(CCOS_CCHTTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCHTTP_PREBUILD)
  if(NOT DEFINED CCOS_CCHTTP_STATIC)
    set(CCOS_CCHTTP_STATIC false)
  endif(NOT DEFINED CCOS_CCHTTP_STATIC)
  if(NOT DEFINED CCOS_CCHTTP_STATICRUNTIME)
    set(CCOS_CCHTTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCHTTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCBITCOIN_ACTIVE)
      if(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCBITCOIN_ACTIVE)
  endif(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcKernel")
      set(CCOS_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcKernel")
     set(CCOS_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcDocuments")
      set(CCOS_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcDocuments")
     set(CCOS_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCHTTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCHTTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcHttp")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcRemoteDevice
  ################################################################################
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
    set(CCOS_CCREMOTEDEVICE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_ACTIVE)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_VERSION)
    set(CCOS_CCREMOTEDEVICE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_VERSION)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_PREBUILD)
    set(CCOS_CCREMOTEDEVICE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_PREBUILD)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_STATIC)
    set(CCOS_CCREMOTEDEVICE_STATIC false)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_STATIC)
  if(NOT DEFINED CCOS_CCREMOTEDEVICE_STATICRUNTIME)
    set(CCOS_CCREMOTEDEVICE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCREMOTEDEVICE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcKernel")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcKernel")
     set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcDocuments")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcDocuments")
     set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcHttp")
      set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcHttp")
     set(CCOS_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  elseif(${CCOS_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcHttp")
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  endif(${CCOS_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcRemoteDevice")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

  ################################################################################
  # CcBitcoin
  ################################################################################
  if(NOT DEFINED CCOS_CCBITCOIN_ACTIVE)
    set(CCOS_CCBITCOIN_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCBITCOIN_ACTIVE)
  if(NOT DEFINED CCOS_CCBITCOIN_VERSION)
    set(CCOS_CCBITCOIN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCBITCOIN_VERSION)
  if(NOT DEFINED CCOS_CCBITCOIN_PREBUILD)
    set(CCOS_CCBITCOIN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCBITCOIN_PREBUILD)
  if(NOT DEFINED CCOS_CCBITCOIN_STATIC)
    set(CCOS_CCBITCOIN_STATIC false)
  endif(NOT DEFINED CCOS_CCBITCOIN_STATIC)
  if(NOT DEFINED CCOS_CCBITCOIN_STATICRUNTIME)
    set(CCOS_CCBITCOIN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCBITCOIN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcKernel")
      set(CCOS_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcKernel")
     set(CCOS_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcDocuments")
      set(CCOS_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcDocuments")
     set(CCOS_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcHttp")
      set(CCOS_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcHttp")
     set(CCOS_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  elseif(${CCOS_CCBITCOIN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcDocuments")
    elseif(${CCOS_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcHttp")
    elseif(${CCOS_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCHTTP_ACTIVE)
  endif(${CCOS_CCBITCOIN_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcBitcoin")
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
    if(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "wiringPi not allowed on Generic")
    endif(${CCOS_THIRDPARTY_WIRINGPI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_WIRINGPI_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_MODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_MODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCFTP_ACTIVE)
    if(${CCOS_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCSHELL_ACTIVE)
    if(${CCOS_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCSSL_ACTIVE)
    if(${CCOS_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCTFTP_ACTIVE)
    if(${CCOS_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCMTP_ACTIVE)
    if(${CCOS_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCSQL_ACTIVE)
    if(${CCOS_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
    if(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShellApp not allowed on Generic")
    endif(${CCOS_APPS_CCSHELLAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSHELLAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
    if(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcScpiCli not allowed on Generic")
    endif(${CCOS_APPS_CCSCPICLI_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCSCPICLI_ACTIVE)
  if(DEFINED CCOS_APPS_CCFS_ACTIVE)
    if(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_APPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCFS_ACTIVE)
  if(DEFINED CCOS_APPS_CCHASH_ACTIVE)
    if(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_APPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_APPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
    if(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSArgumentsApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSARGUMENTSAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_APPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
    if(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_APPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)
    if(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcUsbDriver not allowed on Generic")
    endif(${CCOS_APPS_CCUSBDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_APPS_CCUSBDRIVER_ACTIVE)

endif(GENERIC)
