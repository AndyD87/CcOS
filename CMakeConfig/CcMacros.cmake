################################################################################
# Set Filters to keep FolderStructurs for IDEs like VisualStudios
################################################################################
MACRO( CcSetFiltersByFolders )
  foreach(FILE ${ARGN})
    STRING(REPLACE ${CMAKE_CURRENT_SOURCE_DIR}/ "" FILETEMP ${FILE})
    STRING(REPLACE "/src/" "/" FILETEMP ${FILETEMP})
    STRING(REPLACE "/" "\\" FILETEMP ${FILETEMP})
    GET_FILENAME_COMPONENT( DIRNAME ${FILETEMP} DIRECTORY)
    if( "${DIRNAME}" STREQUAL "src")
      SOURCE_GROUP( "" FILES ${FILE})
    else()
      SOURCE_GROUP( "${DIRNAME}" FILES ${FILE})
    endif()
  ENDFOREACH()
ENDMACRO()

################################################################################
# Load GuiSettings for Windows Gui Applications
################################################################################
MACRO( CcLoadGuiSettings )
  if(DEFINED MSVC)
    set ( CompilerFlags
            CMAKE_EXE_LINKER_FLAGS
            CMAKE_EXE_LINKER_FLAGS_DEBUG
            CMAKE_EXE_LINKER_FLAGS_RELEASE
            CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO
            CMAKE_EXE_LINKER_FLAGS_MINSIZEREL
        )
    foreach(CompilerFlag ${CompilerFlags})
      # For Windows set Subsystem to Windows (/SUBSYSTEM:CONSOLE was set before)
      # keep entry point on main(argc, argv)
      string(REPLACE "/SUBSYSTEM:CONSOLE" "/SUBSYSTEM:WINDOWS /ENTRY:mainCRTStartup" ${CompilerFlag} "${${CompilerFlag}}")
    endforeach()
  endif(DEFINED MSVC)
ENDMACRO( CcLoadGuiSettings )

################################################################################
# Get Standard Postfix for Visual Studio extension
#   Format is $VisualStudioYear-$Architecture[_static][_debug][_MT]
################################################################################
MACRO( CcVisualStudioPostFix OutputString DebugRelease StaticShared StaticSharedRuntime)
  SET(VSEXTIONSION_STRING "")
  if(MSVC_VERSION)
    SET( VSEXTIONSION_STRING "msvc${MSVC_VERSION}")
  else()
    MESSAGE(WARNING "Correct visual studio version not found, use 2015") 
    SET( VSEXTIONSION_STRING "msvc1900")
  endif()
  
  if("${CCOS_BUILD_ARCH}" STREQUAL "x64")
    SET( VSEXTIONSION_STRING "${VSEXTIONSION_STRING}_x64")
  elseif("${CCOS_BUILD_ARCH}" STREQUAL "x86")
    SET( VSEXTIONSION_STRING "${VSEXTIONSION_STRING}_x86")
  else()
    MESSAGE(FATAL_ERROR "Unknown Architecture")
  endif()
  
  if(${StaticShared} STREQUAL "STATIC")
    SET( VSEXTIONSION_STRING "${VSEXTIONSION_STRING}_static")
  else()
    SET( VSEXTIONSION_STRING "${VSEXTIONSION_STRING}_shared")
  endif()
  
  if(${DebugRelease} STREQUAL "DEBUG")
    SET( VSEXTIONSION_STRING "${VSEXTIONSION_STRING}_debug")
  else()
    SET( VSEXTIONSION_STRING "${VSEXTIONSION_STRING}_release")
  endif()
  
  if(${StaticSharedRuntime} STREQUAL "STATIC")
    SET( VSEXTIONSION_STRING "${VSEXTIONSION_STRING}_MT")
  else()
    SET( VSEXTIONSION_STRING "${VSEXTIONSION_STRING}_MD")
  endif()
  
  SET(${OutputString} ${VSEXTIONSION_STRING})
ENDMACRO()

################################################################################
# Get a List of Subdirectories
################################################################################
MACRO(CcGetSubDirs SubDirs CurrentDir)
  FILE(GLOB DirItems RELATIVE ${CurrentDir} ${CurrentDir}/*)
  SET(LocalDirList "")
  FOREACH(DirItem ${DirItems})
    IF(IS_DIRECTORY ${CurrentDir}/${DirItem})
      LIST(APPEND LocalDirList ${DirItem})
    ENDIF()
  ENDFOREACH()
  SET(${SubDirs} ${LocalDirList})
ENDMACRO()

################################################################################
# Print all available Variables on current scope
################################################################################
MACRO( CcPrintAllVars )
  get_cmake_property(_variableNames VARIABLES)
  foreach (_variableName ${_variableNames})
      message(STATUS "${_variableName}=${${_variableName}}")
  endforeach()
ENDMACRO()

# Do not use autogenerated Release Debug from selected Generator
MACRO( CcNoConfigurationDirs )
  foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
      string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
      set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} )
      set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} )
      set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} )
  endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )
ENDMACRO()
