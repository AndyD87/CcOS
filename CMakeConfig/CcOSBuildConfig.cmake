################################################################################
# Config Check for cmake builds
################################################################################

# Setup basic include path
if(NOT CC_CURRENT_CONFIG_DIR)
  set(CC_CURRENT_CONFIG_DIR ${CMAKE_CURRENT_SOURCE_DIR})
endif(NOT CC_CURRENT_CONFIG_DIR)

if(WINDOWS)
  ################################################################################
  # CcKernelModule
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    set(CCOS_CCKERNELMODULE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNELMODULE_VERSION)
    set(CCOS_CCKERNELMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_VERSION)
  if(NOT DEFINED CCOS_CCKERNELMODULE_PREBUILD)
    set(CCOS_CCKERNELMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNELMODULE_STATIC)
    set(CCOS_CCKERNELMODULE_STATIC true)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_STATIC)
  if(NOT DEFINED CCOS_CCKERNELMODULE_STATICRUNTIME)
    set(CCOS_CCKERNELMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
      if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
      if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
      if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  endif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernelModule")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcModule
  ################################################################################
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
    set(CCOS_CCMODULES_CCMODULE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_VERSION)
    set(CCOS_CCMODULES_CCMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_VERSION)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_PREBUILD)
    set(CCOS_CCMODULES_CCMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATIC)
    set(CCOS_CCMODULES_CCMODULE_STATIC true)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATIC)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATICRUNTIME)
    set(CCOS_CCMODULES_CCMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCKERNEL_ACTIVE)
      if(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNEL_ACTIVE)
    if(DEFINED CCOS_CCGUI_ACTIVE)
      if(${CCOS_CCGUI_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCGUI_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
      if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
      if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
      if(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
      if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
      if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
      if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  endif(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcModules/CcModule")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcKernel
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    set(CCOS_CCKERNEL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNEL_VERSION)
    set(CCOS_CCKERNEL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNEL_VERSION)
  if(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
    set(CCOS_CCKERNEL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNEL_STATIC)
    set(CCOS_CCKERNEL_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNEL_STATIC)
  if(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
    set(CCOS_CCKERNEL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCGUI_ACTIVE)
      if(${CCOS_CCGUI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCGUI_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
      if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
      if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
      if(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
      if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
      if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
      if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
      message("Disable CcKernel")
      message("Dependency for CcKernel not solved: CcModule")
      set(CCOS_CCKERNEL_ACTIVE 0)
    elseif(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 0)
      message("Disable CcKernel")
      message("Dependency for CcKernel not enabled but required: CcModule")
     set(CCOS_CCKERNEL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
  elseif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernel not solved: CcModule")
    elseif(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernel not enabled but required: CcModule")
    endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernel")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcGui
  ################################################################################
  if(NOT DEFINED CCOS_CCGUI_ACTIVE)
    set(CCOS_CCGUI_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCGUI_ACTIVE)
  if(NOT DEFINED CCOS_CCGUI_VERSION)
    set(CCOS_CCGUI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCGUI_VERSION)
  if(NOT DEFINED CCOS_CCGUI_PREBUILD)
    set(CCOS_CCGUI_PREBUILD false)
  endif(NOT DEFINED CCOS_CCGUI_PREBUILD)
  if(NOT DEFINED CCOS_CCGUI_STATIC)
    set(CCOS_CCGUI_STATIC true)
  endif(NOT DEFINED CCOS_CCGUI_STATIC)
  if(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
    set(CCOS_CCGUI_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCGUI_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcGui")
      message("Dependency for CcGui not solved: CcKernel")
      set(CCOS_CCGUI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcGui")
      message("Dependency for CcGui not enabled but required: CcKernel")
     set(CCOS_CCGUI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcGui not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcGui not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcGui")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcTestModule
  ################################################################################
  if(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    set(CCOS_CCMODULES_CCTESTMODULE_ACTIVE 0)
  endif(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_VERSION)
    set(CCOS_CCMODULES_CCTESTMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_VERSION)
  if(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_PREBUILD)
    set(CCOS_CCMODULES_CCTESTMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_STATIC)
    set(CCOS_CCMODULES_CCTESTMODULE_STATIC false)
  endif(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_STATIC)
  if(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_STATICRUNTIME)
    set(CCOS_CCMODULES_CCTESTMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTestModule")
      message("Dependency for CcTestModule not solved: CcKernel")
      set(CCOS_CCMODULES_CCTESTMODULE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTestModule")
      message("Dependency for CcTestModule not enabled but required: CcKernel")
     set(CCOS_CCMODULES_CCTESTMODULE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTestModule not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTestModule not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcModules/CcTestModule")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcTftp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    set(CCOS_CCNETWORK_CCTFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_VERSION)
    set(CCOS_CCNETWORK_CCTFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_PREBUILD)
    set(CCOS_CCNETWORK_CCTFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATIC)
    set(CCOS_CCNETWORK_CCTFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCTFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTftp")
      message("Dependency for CcTftp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCTFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTftp")
      message("Dependency for CcTftp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCTFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTftp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTftp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcTftp")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcMqtt
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
    set(CCOS_CCNETWORK_CCMQTT_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_VERSION)
    set(CCOS_CCNETWORK_CCMQTT_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_PREBUILD)
    set(CCOS_CCNETWORK_CCMQTT_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATIC)
    set(CCOS_CCNETWORK_CCMQTT_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCMQTT_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not solved: CcKernel")
      set(CCOS_CCNETWORK_CCMQTT_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCMQTT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMqtt not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMqtt not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcMqtt")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcBitcoin
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
    set(CCOS_CCUTIL_CCBITCOIN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
    set(CCOS_CCUTIL_CCBITCOIN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
    set(CCOS_CCUTIL_CCBITCOIN_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
    set(CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcKernel")
      set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcBitcoin")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcDocuments
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
    set(CCOS_CCUTIL_CCDOCUMENTS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
    set(CCOS_CCUTIL_CCDOCUMENTS_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not solved: CcKernel")
      set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDocuments not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDocuments not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcDocuments")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcDhcp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    set(CCOS_CCNETWORK_CCDHCP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
    set(CCOS_CCNETWORK_CCDHCP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
    set(CCOS_CCNETWORK_CCDHCP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
    set(CCOS_CCNETWORK_CCDHCP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCDHCP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcDhcp")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcTesting
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    set(CCOS_CCUTIL_CCTESTING_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
    set(CCOS_CCUTIL_CCTESTING_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
    set(CCOS_CCUTIL_CCTESTING_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
    set(CCOS_CCUTIL_CCTESTING_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
    set(CCOS_CCUTIL_CCTESTING_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTesting")
      message("Dependency for CcTesting not solved: CcKernel")
      set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTesting")
      message("Dependency for CcTesting not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTesting not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTesting not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcTesting")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcOSBuildConfig
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcKernel")
      set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcDocuments")
      set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
     set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcOSBuildConfig")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcAppInterfaces
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    set(CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_VERSION)
    set(CCOS_CCUTIL_CCAPPINTERFACES_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_PREBUILD)
    set(CCOS_CCUTIL_CCAPPINTERFACES_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_STATIC)
    set(CCOS_CCUTIL_CCAPPINTERFACES_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_STATICRUNTIME)
    set(CCOS_CCUTIL_CCAPPINTERFACES_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcAppInterfaces")
      message("Dependency for CcAppInterfaces not solved: CcKernel")
      set(CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcAppInterfaces")
      message("Dependency for CcAppInterfaces not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcAppInterfaces not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcAppInterfaces not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcAppInterfaces")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcKernelModuleInterface
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_VERSION)
    set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_PREBUILD)
    set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATIC)
    set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATICRUNTIME)
    set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcKernelModuleInterface")
      message("Dependency for CcKernelModuleInterface not solved: CcKernel")
      set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcKernelModuleInterface")
      message("Dependency for CcKernelModuleInterface not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernelModuleInterface not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernelModuleInterface not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcKernelModuleInterface")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcHash
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    set(CCOS_CCAPPS_CCHASH_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_VERSION)
    set(CCOS_CCAPPS_CCHASH_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_PREBUILD)
    set(CCOS_CCAPPS_CCHASH_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_STATIC)
    set(CCOS_CCAPPS_CCHASH_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_STATICRUNTIME)
    set(CCOS_CCAPPS_CCHASH_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcHash")
      message("Dependency for CcHash not solved: CcKernel")
      set(CCOS_CCAPPS_CCHASH_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcHash")
      message("Dependency for CcHash not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCHASH_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHash not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHash not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcHash")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcFs
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    set(CCOS_CCAPPS_CCFS_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCFS_VERSION)
    set(CCOS_CCAPPS_CCFS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCFS_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCFS_PREBUILD)
    set(CCOS_CCAPPS_CCFS_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCFS_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCFS_STATIC)
    set(CCOS_CCAPPS_CCFS_STATIC true)
  endif(NOT DEFINED CCOS_CCAPPS_CCFS_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCFS_STATICRUNTIME)
    set(CCOS_CCAPPS_CCFS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCAPPS_CCFS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCFS_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCFS_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCFS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message("Disable CcFs")
      message("Dependency for CcFs not solved: CcKernelModule")
      set(CCOS_CCAPPS_CCFS_ACTIVE 0)
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message("Disable CcFs")
      message("Dependency for CcFs not enabled but required: CcKernelModule")
     set(CCOS_CCAPPS_CCFS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  elseif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcFs not solved: CcKernelModule")
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcFs not enabled but required: CcKernelModule")
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  endif(${CCOS_CCAPPS_CCFS_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcFs")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcVDisk
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    set(CCOS_CCAPPS_CCVDISK_ACTIVE 2)
  endif(NOT DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCVDISK_VERSION)
    set(CCOS_CCAPPS_CCVDISK_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCVDISK_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCVDISK_PREBUILD)
    set(CCOS_CCAPPS_CCVDISK_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCVDISK_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCVDISK_STATIC)
    set(CCOS_CCAPPS_CCVDISK_STATIC true)
  endif(NOT DEFINED CCOS_CCAPPS_CCVDISK_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCVDISK_STATICRUNTIME)
    set(CCOS_CCAPPS_CCVDISK_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCAPPS_CCVDISK_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCVDISK_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCVDISK_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message("Disable CcVDisk")
      message("Dependency for CcVDisk not solved: CcKernelModule")
      set(CCOS_CCAPPS_CCVDISK_ACTIVE 0)
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message("Disable CcVDisk")
      message("Dependency for CcVDisk not enabled but required: CcKernelModule")
     set(CCOS_CCAPPS_CCVDISK_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  elseif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcVDisk not solved: CcKernelModule")
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcVDisk not enabled but required: CcKernelModule")
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcVDisk")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcKernelModuleTestDriver
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_VERSION)
    set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_PREBUILD)
    set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATIC)
    set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATIC true)
  endif(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME)
    set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message("Disable CcKernelModuleTestDriver")
      message("Dependency for CcKernelModuleTestDriver not solved: CcKernelModule")
      set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE 0)
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message("Disable CcKernelModuleTestDriver")
      message("Dependency for CcKernelModuleTestDriver not enabled but required: CcKernelModule")
     set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  elseif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernelModuleTestDriver not solved: CcKernelModule")
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernelModuleTestDriver not enabled but required: CcKernelModule")
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcKernelModuleTestDriver")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcOSBuildConfigApp
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcKernel")
      set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcDocuments")
      set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
     set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcOSBuildConfigApp")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcOSResourceApp
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    set(CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_VERSION)
    set(CCOS_CCAPPS_CCOSRESOURCEAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_PREBUILD)
    set(CCOS_CCAPPS_CCOSRESOURCEAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_STATIC)
    set(CCOS_CCAPPS_CCOSRESOURCEAPP_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_STATICRUNTIME)
    set(CCOS_CCAPPS_CCOSRESOURCEAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSResourceApp")
      message("Dependency for CcOSResourceApp not solved: CcKernel")
      set(CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSResourceApp")
      message("Dependency for CcOSResourceApp not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSResourceApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSResourceApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcOSResourceApp")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcOSModuleLoader
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    set(CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_VERSION)
    set(CCOS_CCAPPS_CCOSMODULELOADER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_PREBUILD)
    set(CCOS_CCAPPS_CCOSMODULELOADER_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_STATIC)
    set(CCOS_CCAPPS_CCOSMODULELOADER_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_STATICRUNTIME)
    set(CCOS_CCAPPS_CCOSMODULELOADER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSModuleLoader")
      message("Dependency for CcOSModuleLoader not solved: CcKernel")
      set(CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSModuleLoader")
      message("Dependency for CcOSModuleLoader not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSModuleLoader not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSModuleLoader not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcOSModuleLoader")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # jpeg
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
    set(CCOS_THIRDPARTY_JPEG_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
    set(CCOS_THIRDPARTY_JPEG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
    set(CCOS_THIRDPARTY_JPEG_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
    set(CCOS_THIRDPARTY_JPEG_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
    set(CCOS_THIRDPARTY_JPEG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/jpeg")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcMedia
  ################################################################################
  if(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
    set(CCOS_CCMEDIA_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
  if(NOT DEFINED CCOS_CCMEDIA_VERSION)
    set(CCOS_CCMEDIA_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMEDIA_VERSION)
  if(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
    set(CCOS_CCMEDIA_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
  if(NOT DEFINED CCOS_CCMEDIA_STATIC)
    set(CCOS_CCMEDIA_STATIC true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATIC)
  if(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
    set(CCOS_CCMEDIA_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMedia")
      message("Dependency for CcMedia not solved: CcKernel")
      set(CCOS_CCMEDIA_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMedia")
      message("Dependency for CcMedia not enabled but required: CcKernel")
     set(CCOS_CCMEDIA_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMedia not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMedia not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcMedia")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # openssl
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
    set(CCOS_THIRDPARTY_OPENSSL_VERSION 1.1.0.5)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
    set(CCOS_THIRDPARTY_OPENSSL_PREBUILD true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
    set(CCOS_THIRDPARTY_OPENSSL_STATIC true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
    set(CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/openssl")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcSsl
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    set(CCOS_CCNETWORK_CCSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_VERSION)
    set(CCOS_CCNETWORK_CCSSL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_PREBUILD)
    set(CCOS_CCNETWORK_CCSSL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATIC)
    set(CCOS_CCNETWORK_CCSSL_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcSsl")
      message("Dependency for CcSsl not solved: CcKernel")
      set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcSsl")
      message("Dependency for CcSsl not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message("Disable CcSsl")
      message("Dependency for CcSsl not solved: openssl")
      set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message("Disable CcSsl")
      message("Dependency for CcSsl not enabled but required: openssl")
     set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: openssl")
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: openssl")
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcSsl")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcFtp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    set(CCOS_CCNETWORK_CCFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_VERSION)
    set(CCOS_CCNETWORK_CCFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_PREBUILD)
    set(CCOS_CCNETWORK_CCFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATIC)
    set(CCOS_CCNETWORK_CCFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcFtp")
      message("Dependency for CcFtp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcFtp")
      message("Dependency for CcFtp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcFtp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcFtp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcFtp")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcHttp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    set(CCOS_CCNETWORK_CCHTTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_VERSION)
    set(CCOS_CCNETWORK_CCHTTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_PREBUILD)
    set(CCOS_CCNETWORK_CCHTTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATIC)
    set(CCOS_CCNETWORK_CCHTTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCHTTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcHttp")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcRemoteDevice
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_VERSION)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_PREBUILD)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATIC)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcKernel")
      set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcHttp")
      set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcHttp")
     set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcHttp")
    elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcRemoteDevice")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcShell
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    set(CCOS_CCNETWORK_CCSHELL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_VERSION)
    set(CCOS_CCNETWORK_CCSHELL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_PREBUILD)
    set(CCOS_CCNETWORK_CCSHELL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATIC)
    set(CCOS_CCNETWORK_CCSHELL_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCSHELL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcShell")
      message("Dependency for CcShell not solved: CcKernel")
      set(CCOS_CCNETWORK_CCSHELL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcShell")
      message("Dependency for CcShell not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCSHELL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcShell not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcShell not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcShell")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcRemoteDeviceServer
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_VERSION)
    set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_PREBUILD)
    set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATIC)
    set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATICRUNTIME)
    set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      message("Disable CcRemoteDeviceServer")
      message("Dependency for CcRemoteDeviceServer not solved: CcRemoteDevice")
      set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE 0)
    elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDeviceServer")
      message("Dependency for CcRemoteDeviceServer not enabled but required: CcRemoteDevice")
     set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  elseif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceServer not solved: CcRemoteDevice")
    elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceServer not enabled but required: CcRemoteDevice")
    endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcRemoteDeviceServer")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcRemoteDeviceClient
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_VERSION)
    set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_PREBUILD)
    set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATIC)
    set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATICRUNTIME)
    set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCGUI_ACTIVE)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not solved: CcGui")
      set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    elseif(${CCOS_CCGUI_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not enabled but required: CcGui")
     set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCGUI_ACTIVE)
    if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not solved: CcRemoteDevice")
      set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not enabled but required: CcRemoteDevice")
     set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  elseif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCGUI_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not solved: CcGui")
    elseif(${CCOS_CCGUI_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not enabled but required: CcGui")
    endif(NOT DEFINED CCOS_CCGUI_ACTIVE)
    if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not solved: CcRemoteDevice")
    elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not enabled but required: CcRemoteDevice")
    endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcRemoteDeviceClient")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # sqlite3
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
    set(CCOS_THIRDPARTY_SQLITE3_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
    set(CCOS_THIRDPARTY_SQLITE3_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
    set(CCOS_THIRDPARTY_SQLITE3_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
    set(CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable sqlite3")
      message("Dependency for sqlite3 not solved: CcKernel")
      set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable sqlite3")
      message("Dependency for sqlite3 not enabled but required: CcKernel")
     set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for sqlite3 not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for sqlite3 not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/sqlite3")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

  ################################################################################
  # CcSql
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    set(CCOS_CCUTIL_CCSQL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_VERSION)
    set(CCOS_CCUTIL_CCSQL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_PREBUILD)
    set(CCOS_CCUTIL_CCSQL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_STATIC)
    set(CCOS_CCUTIL_CCSQL_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_STATICRUNTIME)
    set(CCOS_CCUTIL_CCSQL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcSql")
      message("Dependency for CcSql not solved: CcKernel")
      set(CCOS_CCUTIL_CCSQL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcSql")
      message("Dependency for CcSql not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCSQL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSql not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSql not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcSql")
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Windows")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Windows")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)

endif(WINDOWS)
################################################################################
# Config Check for cmake builds
################################################################################

# Setup basic include path
if(NOT CC_CURRENT_CONFIG_DIR)
  set(CC_CURRENT_CONFIG_DIR ${CMAKE_CURRENT_SOURCE_DIR})
endif(NOT CC_CURRENT_CONFIG_DIR)

if(LINUX)
  ################################################################################
  # CcKernelModule
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    set(CCOS_CCKERNELMODULE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNELMODULE_VERSION)
    set(CCOS_CCKERNELMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_VERSION)
  if(NOT DEFINED CCOS_CCKERNELMODULE_PREBUILD)
    set(CCOS_CCKERNELMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNELMODULE_STATIC)
    set(CCOS_CCKERNELMODULE_STATIC true)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_STATIC)
  if(NOT DEFINED CCOS_CCKERNELMODULE_STATICRUNTIME)
    set(CCOS_CCKERNELMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNELMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
      if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
      if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
      if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNELMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  endif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernelModule")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcModule
  ################################################################################
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
    set(CCOS_CCMODULES_CCMODULE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_VERSION)
    set(CCOS_CCMODULES_CCMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_VERSION)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_PREBUILD)
    set(CCOS_CCMODULES_CCMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATIC)
    set(CCOS_CCMODULES_CCMODULE_STATIC true)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATIC)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATICRUNTIME)
    set(CCOS_CCMODULES_CCMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCKERNEL_ACTIVE)
      if(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNEL_ACTIVE)
    if(DEFINED CCOS_CCGUI_ACTIVE)
      if(${CCOS_CCGUI_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCGUI_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
      if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
      if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
      if(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
      if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
      if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
      if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  endif(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcModules/CcModule")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcKernel
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    set(CCOS_CCKERNEL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNEL_VERSION)
    set(CCOS_CCKERNEL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNEL_VERSION)
  if(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
    set(CCOS_CCKERNEL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNEL_STATIC)
    set(CCOS_CCKERNEL_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNEL_STATIC)
  if(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
    set(CCOS_CCKERNEL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCGUI_ACTIVE)
      if(${CCOS_CCGUI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCGUI_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
      if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
      if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
      if(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
      if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
      if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
      if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
      message("Disable CcKernel")
      message("Dependency for CcKernel not solved: CcModule")
      set(CCOS_CCKERNEL_ACTIVE 0)
    elseif(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 0)
      message("Disable CcKernel")
      message("Dependency for CcKernel not enabled but required: CcModule")
     set(CCOS_CCKERNEL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
  elseif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernel not solved: CcModule")
    elseif(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernel not enabled but required: CcModule")
    endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernel")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcGui
  ################################################################################
  if(NOT DEFINED CCOS_CCGUI_ACTIVE)
    set(CCOS_CCGUI_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCGUI_ACTIVE)
  if(NOT DEFINED CCOS_CCGUI_VERSION)
    set(CCOS_CCGUI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCGUI_VERSION)
  if(NOT DEFINED CCOS_CCGUI_PREBUILD)
    set(CCOS_CCGUI_PREBUILD false)
  endif(NOT DEFINED CCOS_CCGUI_PREBUILD)
  if(NOT DEFINED CCOS_CCGUI_STATIC)
    set(CCOS_CCGUI_STATIC true)
  endif(NOT DEFINED CCOS_CCGUI_STATIC)
  if(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
    set(CCOS_CCGUI_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCGUI_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcGui")
      message("Dependency for CcGui not solved: CcKernel")
      set(CCOS_CCGUI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcGui")
      message("Dependency for CcGui not enabled but required: CcKernel")
     set(CCOS_CCGUI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcGui not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcGui not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcGui")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # Raspbian
  ################################################################################
  if(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    set(CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE 0)
  endif(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_VERSION)
    set(CCOS_CCMODULES_PLATFORM_RASPBIAN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_VERSION)
  if(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_PREBUILD)
    set(CCOS_CCMODULES_PLATFORM_RASPBIAN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_PREBUILD)
  if(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_STATIC)
    set(CCOS_CCMODULES_PLATFORM_RASPBIAN_STATIC true)
  endif(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_STATIC)
  if(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_STATICRUNTIME)
    set(CCOS_CCMODULES_PLATFORM_RASPBIAN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable Raspbian")
      message("Dependency for Raspbian not solved: CcKernel")
      set(CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable Raspbian")
      message("Dependency for Raspbian not enabled but required: CcKernel")
     set(CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for Raspbian not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for Raspbian not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcModules/Platform/Raspbian")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcTestModule
  ################################################################################
  if(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    set(CCOS_CCMODULES_CCTESTMODULE_ACTIVE 0)
  endif(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_VERSION)
    set(CCOS_CCMODULES_CCTESTMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_VERSION)
  if(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_PREBUILD)
    set(CCOS_CCMODULES_CCTESTMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_STATIC)
    set(CCOS_CCMODULES_CCTESTMODULE_STATIC false)
  endif(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_STATIC)
  if(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_STATICRUNTIME)
    set(CCOS_CCMODULES_CCTESTMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMODULES_CCTESTMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTestModule")
      message("Dependency for CcTestModule not solved: CcKernel")
      set(CCOS_CCMODULES_CCTESTMODULE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTestModule")
      message("Dependency for CcTestModule not enabled but required: CcKernel")
     set(CCOS_CCMODULES_CCTESTMODULE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTestModule not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTestModule not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcModules/CcTestModule")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcTftp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    set(CCOS_CCNETWORK_CCTFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_VERSION)
    set(CCOS_CCNETWORK_CCTFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_PREBUILD)
    set(CCOS_CCNETWORK_CCTFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATIC)
    set(CCOS_CCNETWORK_CCTFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCTFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTftp")
      message("Dependency for CcTftp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCTFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTftp")
      message("Dependency for CcTftp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCTFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTftp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTftp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcTftp")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcMqtt
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
    set(CCOS_CCNETWORK_CCMQTT_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_VERSION)
    set(CCOS_CCNETWORK_CCMQTT_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_PREBUILD)
    set(CCOS_CCNETWORK_CCMQTT_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATIC)
    set(CCOS_CCNETWORK_CCMQTT_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCMQTT_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not solved: CcKernel")
      set(CCOS_CCNETWORK_CCMQTT_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCMQTT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMqtt not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMqtt not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcMqtt")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcBitcoin
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
    set(CCOS_CCUTIL_CCBITCOIN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
    set(CCOS_CCUTIL_CCBITCOIN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
    set(CCOS_CCUTIL_CCBITCOIN_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
    set(CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcKernel")
      set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcBitcoin")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcDocuments
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
    set(CCOS_CCUTIL_CCDOCUMENTS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
    set(CCOS_CCUTIL_CCDOCUMENTS_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not solved: CcKernel")
      set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDocuments not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDocuments not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcDocuments")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcDhcp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    set(CCOS_CCNETWORK_CCDHCP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
    set(CCOS_CCNETWORK_CCDHCP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
    set(CCOS_CCNETWORK_CCDHCP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
    set(CCOS_CCNETWORK_CCDHCP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCDHCP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcDhcp")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcTesting
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    set(CCOS_CCUTIL_CCTESTING_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
    set(CCOS_CCUTIL_CCTESTING_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
    set(CCOS_CCUTIL_CCTESTING_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
    set(CCOS_CCUTIL_CCTESTING_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
    set(CCOS_CCUTIL_CCTESTING_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTesting")
      message("Dependency for CcTesting not solved: CcKernel")
      set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTesting")
      message("Dependency for CcTesting not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTesting not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTesting not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcTesting")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcOSBuildConfig
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcKernel")
      set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcDocuments")
      set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
     set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcOSBuildConfig")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcAppInterfaces
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    set(CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_VERSION)
    set(CCOS_CCUTIL_CCAPPINTERFACES_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_PREBUILD)
    set(CCOS_CCUTIL_CCAPPINTERFACES_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_STATIC)
    set(CCOS_CCUTIL_CCAPPINTERFACES_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_STATICRUNTIME)
    set(CCOS_CCUTIL_CCAPPINTERFACES_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCAPPINTERFACES_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcAppInterfaces")
      message("Dependency for CcAppInterfaces not solved: CcKernel")
      set(CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcAppInterfaces")
      message("Dependency for CcAppInterfaces not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcAppInterfaces not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcAppInterfaces not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcAppInterfaces")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcKernelModuleInterface
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_VERSION)
    set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_PREBUILD)
    set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATIC)
    set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATICRUNTIME)
    set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcKernelModuleInterface")
      message("Dependency for CcKernelModuleInterface not solved: CcKernel")
      set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcKernelModuleInterface")
      message("Dependency for CcKernelModuleInterface not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernelModuleInterface not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernelModuleInterface not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcKernelModuleInterface")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcHash
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    set(CCOS_CCAPPS_CCHASH_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_VERSION)
    set(CCOS_CCAPPS_CCHASH_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_PREBUILD)
    set(CCOS_CCAPPS_CCHASH_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_STATIC)
    set(CCOS_CCAPPS_CCHASH_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_STATICRUNTIME)
    set(CCOS_CCAPPS_CCHASH_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcHash")
      message("Dependency for CcHash not solved: CcKernel")
      set(CCOS_CCAPPS_CCHASH_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcHash")
      message("Dependency for CcHash not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCHASH_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHash not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHash not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcHash")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcKernelModuleTestDriver
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_VERSION)
    set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_PREBUILD)
    set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATIC)
    set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATIC true)
  endif(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME)
    set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message("Disable CcKernelModuleTestDriver")
      message("Dependency for CcKernelModuleTestDriver not solved: CcKernelModule")
      set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE 0)
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message("Disable CcKernelModuleTestDriver")
      message("Dependency for CcKernelModuleTestDriver not enabled but required: CcKernelModule")
     set(CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  elseif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernelModuleTestDriver not solved: CcKernelModule")
    elseif(${CCOS_CCKERNELMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernelModuleTestDriver not enabled but required: CcKernelModule")
    endif(NOT DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcKernelModuleTestDriver")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcOSBuildConfigApp
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcKernel")
      set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcDocuments")
      set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
     set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcOSBuildConfigApp")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcOSResourceApp
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    set(CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_VERSION)
    set(CCOS_CCAPPS_CCOSRESOURCEAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_PREBUILD)
    set(CCOS_CCAPPS_CCOSRESOURCEAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_STATIC)
    set(CCOS_CCAPPS_CCOSRESOURCEAPP_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_STATICRUNTIME)
    set(CCOS_CCAPPS_CCOSRESOURCEAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSResourceApp")
      message("Dependency for CcOSResourceApp not solved: CcKernel")
      set(CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSResourceApp")
      message("Dependency for CcOSResourceApp not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSResourceApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSResourceApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcOSResourceApp")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcOSModuleLoader
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    set(CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_VERSION)
    set(CCOS_CCAPPS_CCOSMODULELOADER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_PREBUILD)
    set(CCOS_CCAPPS_CCOSMODULELOADER_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_STATIC)
    set(CCOS_CCAPPS_CCOSMODULELOADER_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_STATICRUNTIME)
    set(CCOS_CCAPPS_CCOSMODULELOADER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSMODULELOADER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcOSModuleLoader")
      message("Dependency for CcOSModuleLoader not solved: CcKernel")
      set(CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcOSModuleLoader")
      message("Dependency for CcOSModuleLoader not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSModuleLoader not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSModuleLoader not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcOSModuleLoader")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # jpeg
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
    set(CCOS_THIRDPARTY_JPEG_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
    set(CCOS_THIRDPARTY_JPEG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
    set(CCOS_THIRDPARTY_JPEG_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
    set(CCOS_THIRDPARTY_JPEG_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
    set(CCOS_THIRDPARTY_JPEG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/jpeg")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcMedia
  ################################################################################
  if(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
    set(CCOS_CCMEDIA_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
  if(NOT DEFINED CCOS_CCMEDIA_VERSION)
    set(CCOS_CCMEDIA_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMEDIA_VERSION)
  if(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
    set(CCOS_CCMEDIA_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
  if(NOT DEFINED CCOS_CCMEDIA_STATIC)
    set(CCOS_CCMEDIA_STATIC true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATIC)
  if(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
    set(CCOS_CCMEDIA_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMedia")
      message("Dependency for CcMedia not solved: CcKernel")
      set(CCOS_CCMEDIA_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMedia")
      message("Dependency for CcMedia not enabled but required: CcKernel")
     set(CCOS_CCMEDIA_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMedia not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMedia not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcMedia")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # openssl
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
    set(CCOS_THIRDPARTY_OPENSSL_VERSION 1.1.0.5)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
    set(CCOS_THIRDPARTY_OPENSSL_PREBUILD true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
    set(CCOS_THIRDPARTY_OPENSSL_STATIC true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
    set(CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/openssl")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcSsl
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    set(CCOS_CCNETWORK_CCSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_VERSION)
    set(CCOS_CCNETWORK_CCSSL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_PREBUILD)
    set(CCOS_CCNETWORK_CCSSL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATIC)
    set(CCOS_CCNETWORK_CCSSL_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcSsl")
      message("Dependency for CcSsl not solved: CcKernel")
      set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcSsl")
      message("Dependency for CcSsl not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message("Disable CcSsl")
      message("Dependency for CcSsl not solved: openssl")
      set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message("Disable CcSsl")
      message("Dependency for CcSsl not enabled but required: openssl")
     set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: openssl")
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: openssl")
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcSsl")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcFtp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    set(CCOS_CCNETWORK_CCFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_VERSION)
    set(CCOS_CCNETWORK_CCFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_PREBUILD)
    set(CCOS_CCNETWORK_CCFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATIC)
    set(CCOS_CCNETWORK_CCFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcFtp")
      message("Dependency for CcFtp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcFtp")
      message("Dependency for CcFtp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcFtp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcFtp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcFtp")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcHttp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    set(CCOS_CCNETWORK_CCHTTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_VERSION)
    set(CCOS_CCNETWORK_CCHTTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_PREBUILD)
    set(CCOS_CCNETWORK_CCHTTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATIC)
    set(CCOS_CCNETWORK_CCHTTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCHTTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcHttp")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcRemoteDevice
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_VERSION)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_PREBUILD)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATIC)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcKernel")
      set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcHttp")
      set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcHttp")
     set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcHttp")
    elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcRemoteDevice")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcShell
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    set(CCOS_CCNETWORK_CCSHELL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_VERSION)
    set(CCOS_CCNETWORK_CCSHELL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_PREBUILD)
    set(CCOS_CCNETWORK_CCSHELL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATIC)
    set(CCOS_CCNETWORK_CCSHELL_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCSHELL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcShell")
      message("Dependency for CcShell not solved: CcKernel")
      set(CCOS_CCNETWORK_CCSHELL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcShell")
      message("Dependency for CcShell not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCSHELL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcShell not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcShell not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcShell")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcRemoteDeviceServer
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_VERSION)
    set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_PREBUILD)
    set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATIC)
    set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATICRUNTIME)
    set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      message("Disable CcRemoteDeviceServer")
      message("Dependency for CcRemoteDeviceServer not solved: CcRemoteDevice")
      set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE 0)
    elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDeviceServer")
      message("Dependency for CcRemoteDeviceServer not enabled but required: CcRemoteDevice")
     set(CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  elseif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceServer not solved: CcRemoteDevice")
    elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceServer not enabled but required: CcRemoteDevice")
    endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcRemoteDeviceServer")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcRemoteDeviceClient
  ################################################################################
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_VERSION)
    set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_PREBUILD)
    set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATIC)
    set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATICRUNTIME)
    set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCGUI_ACTIVE)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not solved: CcGui")
      set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    elseif(${CCOS_CCGUI_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not enabled but required: CcGui")
     set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCGUI_ACTIVE)
    if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not solved: CcRemoteDevice")
      set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDeviceClient")
      message("Dependency for CcRemoteDeviceClient not enabled but required: CcRemoteDevice")
     set(CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  elseif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCGUI_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not solved: CcGui")
    elseif(${CCOS_CCGUI_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not enabled but required: CcGui")
    endif(NOT DEFINED CCOS_CCGUI_ACTIVE)
    if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not solved: CcRemoteDevice")
    elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDeviceClient not enabled but required: CcRemoteDevice")
    endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcApps/CcRemoteDeviceClient")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # mtp
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    set(CCOS_THIRDPARTY_MTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_MTP_VERSION)
    set(CCOS_THIRDPARTY_MTP_VERSION 1.1.10.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_MTP_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_MTP_PREBUILD)
    set(CCOS_THIRDPARTY_MTP_PREBUILD true)
  endif(NOT DEFINED CCOS_THIRDPARTY_MTP_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_MTP_STATIC)
    set(CCOS_THIRDPARTY_MTP_STATIC true)
  endif(NOT DEFINED CCOS_THIRDPARTY_MTP_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_MTP_STATICRUNTIME)
    set(CCOS_THIRDPARTY_MTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_MTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_MTP_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_THIRDPARTY_MTP_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  endif(${CCOS_THIRDPARTY_MTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/mtp")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcMtp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    set(CCOS_CCNETWORK_CCMTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCMTP_VERSION)
    set(CCOS_CCNETWORK_CCMTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCMTP_PREBUILD)
    set(CCOS_CCNETWORK_CCMTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCMTP_STATIC)
    set(CCOS_CCNETWORK_CCMTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCMTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCMTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCMTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCMTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMtp")
      message("Dependency for CcMtp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCMTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMtp")
      message("Dependency for CcMtp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCMTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
      message("Disable CcMtp")
      message("Dependency for CcMtp not solved: mtp")
      set(CCOS_CCNETWORK_CCMTP_ACTIVE 0)
    elseif(${CCOS_THIRDPARTY_MTP_ACTIVE} EQUAL 0)
      message("Disable CcMtp")
      message("Dependency for CcMtp not enabled but required: mtp")
     set(CCOS_CCNETWORK_CCMTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMtp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMtp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMtp not solved: mtp")
    elseif(${CCOS_THIRDPARTY_MTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMtp not enabled but required: mtp")
    endif(NOT DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcMtp")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # sqlite3
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
    set(CCOS_THIRDPARTY_SQLITE3_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
    set(CCOS_THIRDPARTY_SQLITE3_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
    set(CCOS_THIRDPARTY_SQLITE3_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
    set(CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable sqlite3")
      message("Dependency for sqlite3 not solved: CcKernel")
      set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable sqlite3")
      message("Dependency for sqlite3 not enabled but required: CcKernel")
     set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for sqlite3 not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for sqlite3 not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/sqlite3")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

  ################################################################################
  # CcSql
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    set(CCOS_CCUTIL_CCSQL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_VERSION)
    set(CCOS_CCUTIL_CCSQL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_PREBUILD)
    set(CCOS_CCUTIL_CCSQL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_STATIC)
    set(CCOS_CCUTIL_CCSQL_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_STATICRUNTIME)
    set(CCOS_CCUTIL_CCSQL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcSql")
      message("Dependency for CcSql not solved: CcKernel")
      set(CCOS_CCUTIL_CCSQL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcSql")
      message("Dependency for CcSql not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCSQL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSql not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSql not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcSql")
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Linux")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Linux")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)

endif(LINUX)
################################################################################
# Config Check for cmake builds
################################################################################

# Setup basic include path
if(NOT CC_CURRENT_CONFIG_DIR)
  set(CC_CURRENT_CONFIG_DIR ${CMAKE_CURRENT_SOURCE_DIR})
endif(NOT CC_CURRENT_CONFIG_DIR)

if(GENERIC)
  ################################################################################
  # CcModule
  ################################################################################
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
    set(CCOS_CCMODULES_CCMODULE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_VERSION)
    set(CCOS_CCMODULES_CCMODULE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_VERSION)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_PREBUILD)
    set(CCOS_CCMODULES_CCMODULE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_PREBUILD)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATIC)
    set(CCOS_CCMODULES_CCMODULE_STATIC true)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATIC)
  if(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATICRUNTIME)
    set(CCOS_CCMODULES_CCMODULE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCKERNEL_ACTIVE)
      if(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCKERNEL_ACTIVE)
    if(DEFINED CCOS_CCGUI_ACTIVE)
      if(${CCOS_CCGUI_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCGUI_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
      if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
      if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
      if(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
      if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
      if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
      if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCMODULES_CCMODULE_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  endif(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcModules/CcModule")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  ################################################################################
  # CcKernel
  ################################################################################
  if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    set(CCOS_CCKERNEL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNEL_VERSION)
    set(CCOS_CCKERNEL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNEL_VERSION)
  if(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
    set(CCOS_CCKERNEL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNEL_STATIC)
    set(CCOS_CCKERNEL_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNEL_STATIC)
  if(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
    set(CCOS_CCKERNEL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCGUI_ACTIVE)
      if(${CCOS_CCGUI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCGUI_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
      if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
      if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
      if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
      if(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
      if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
      if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
      if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
      if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
      if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
      if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
      message("Disable CcKernel")
      message("Dependency for CcKernel not solved: CcModule")
      set(CCOS_CCKERNEL_ACTIVE 0)
    elseif(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 0)
      message("Disable CcKernel")
      message("Dependency for CcKernel not enabled but required: CcModule")
     set(CCOS_CCKERNEL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
  elseif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
      message(FATAL_ERROR "Dependency for CcKernel not solved: CcModule")
    elseif(${CCOS_CCMODULES_CCMODULE_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcKernel not enabled but required: CcModule")
    endif(NOT DEFINED CCOS_CCMODULES_CCMODULE_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcKernel")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  ################################################################################
  # CcGui
  ################################################################################
  if(NOT DEFINED CCOS_CCGUI_ACTIVE)
    set(CCOS_CCGUI_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCGUI_ACTIVE)
  if(NOT DEFINED CCOS_CCGUI_VERSION)
    set(CCOS_CCGUI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCGUI_VERSION)
  if(NOT DEFINED CCOS_CCGUI_PREBUILD)
    set(CCOS_CCGUI_PREBUILD false)
  endif(NOT DEFINED CCOS_CCGUI_PREBUILD)
  if(NOT DEFINED CCOS_CCGUI_STATIC)
    set(CCOS_CCGUI_STATIC true)
  endif(NOT DEFINED CCOS_CCGUI_STATIC)
  if(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
    set(CCOS_CCGUI_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCGUI_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcGui")
      message("Dependency for CcGui not solved: CcKernel")
      set(CCOS_CCGUI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcGui")
      message("Dependency for CcGui not enabled but required: CcKernel")
     set(CCOS_CCGUI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcGui not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcGui not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcGui")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  ################################################################################
  # CcMqtt
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
    set(CCOS_CCNETWORK_CCMQTT_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_VERSION)
    set(CCOS_CCNETWORK_CCMQTT_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_PREBUILD)
    set(CCOS_CCNETWORK_CCMQTT_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATIC)
    set(CCOS_CCNETWORK_CCMQTT_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCMQTT_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCMQTT_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not solved: CcKernel")
      set(CCOS_CCNETWORK_CCMQTT_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcMqtt")
      message("Dependency for CcMqtt not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCMQTT_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMqtt not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMqtt not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCMQTT_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcMqtt")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  ################################################################################
  # CcBitcoin
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
    set(CCOS_CCUTIL_CCBITCOIN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
    set(CCOS_CCUTIL_CCBITCOIN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
    set(CCOS_CCUTIL_CCBITCOIN_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
    set(CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcKernel")
      set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcBitcoin")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  ################################################################################
  # CcDocuments
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
    set(CCOS_CCUTIL_CCDOCUMENTS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
    set(CCOS_CCUTIL_CCDOCUMENTS_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not solved: CcKernel")
      set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDocuments")
      message("Dependency for CcDocuments not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDocuments not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDocuments not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcDocuments")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  ################################################################################
  # CcDhcp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    set(CCOS_CCNETWORK_CCDHCP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
    set(CCOS_CCNETWORK_CCDHCP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
    set(CCOS_CCNETWORK_CCDHCP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
    set(CCOS_CCNETWORK_CCDHCP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCDHCP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcDhcp")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  ################################################################################
  # CcTesting
  ################################################################################
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    set(CCOS_CCUTIL_CCTESTING_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
    set(CCOS_CCUTIL_CCTESTING_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
    set(CCOS_CCUTIL_CCTESTING_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
    set(CCOS_CCUTIL_CCTESTING_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
    set(CCOS_CCUTIL_CCTESTING_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcTesting")
      message("Dependency for CcTesting not solved: CcKernel")
      set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcTesting")
      message("Dependency for CcTesting not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTesting not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTesting not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcUtil/CcTesting")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  ################################################################################
  # jpeg
  ################################################################################
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
    set(CCOS_THIRDPARTY_JPEG_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
    set(CCOS_THIRDPARTY_JPEG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
    set(CCOS_THIRDPARTY_JPEG_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
    set(CCOS_THIRDPARTY_JPEG_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
    set(CCOS_THIRDPARTY_JPEG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/ThirdParty/jpeg")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  ################################################################################
  # CcHttp
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    set(CCOS_CCNETWORK_CCHTTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_VERSION)
    set(CCOS_CCNETWORK_CCHTTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_PREBUILD)
    set(CCOS_CCNETWORK_CCHTTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATIC)
    set(CCOS_CCNETWORK_CCHTTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCHTTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
      if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCHTTP_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcHttp")
      message("Dependency for CcHttp not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcHttp")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  ################################################################################
  # CcRemoteDevice
  ################################################################################
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_VERSION)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_PREBUILD)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATIC)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCREMOTEDEVICE_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCREMOTEDEVICE_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
      if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
        set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # Check if required because of own dependencies
  if(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcKernel")
      set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not solved: CcHttp")
      set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 0)
      message("Disable CcRemoteDevice")
      message("Dependency for CcRemoteDevice not enabled but required: CcHttp")
     set(CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not solved: CcHttp")
    elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcRemoteDevice not enabled but required: CcHttp")
    endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  endif(${CCOS_CCNETWORK_CCREMOTEDEVICE_ACTIVE} EQUAL 1)
  # add project
  add_subdirectory("${CC_CURRENT_CONFIG_DIR}/CcNetwork/CcRemoteDevice")
  if(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
    if(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModule not allowed on Generic")
    endif(${CCOS_CCKERNELMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCKERNELMODULE_ACTIVE)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
    if(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTestModule not allowed on Generic")
    endif(${CCOS_CCMODULES_CCTESTMODULE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_CCTESTMODULE_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCMTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCMTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
    if(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcAppInterfaces not allowed on Generic")
    endif(${CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCAPPINTERFACES_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
    if(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleInterface not allowed on Generic")
    endif(${CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCKERNELMODULEINTERFACE_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
    if(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFs not allowed on Generic")
    endif(${CCOS_CCAPPS_CCFS_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCFS_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
    if(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcVDisk not allowed on Generic")
    endif(${CCOS_CCAPPS_CCVDISK_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCVDISK_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
    if(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcKernelModuleTestDriver not allowed on Generic")
    endif(${CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCKERNELMODULETESTDRIVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceServer not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICESERVER_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
    if(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcRemoteDeviceClient not allowed on Generic")
    endif(${CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCREMOTEDEVICECLIENT_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSResourceApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSRESOURCEAPP_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
    if(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSModuleLoader not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSMODULELOADER_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
    if(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "mtp not allowed on Generic")
    endif(${CCOS_THIRDPARTY_MTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_MTP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

endif(GENERIC)
