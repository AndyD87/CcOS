################################################################################
# Config Check for cmake builds
################################################################################
if(WINDOWS)
  # Project: CcKernel
  if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    set(CCOS_CCKERNEL_ACTIVE 4)
  endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNEL_VERSION)
    set(CCOS_CCKERNEL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNEL_VERSION)
  if(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
    set(CCOS_CCKERNEL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNEL_STATIC)
    set(CCOS_CCKERNEL_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNEL_STATIC)
  if(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
    set(CCOS_CCKERNEL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCGUI_ACTIVE)
      if(${CCOS_CCGUI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCGUI_ACTIVE)
    if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
      if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
      if(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
      if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
      if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
      if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  elseif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcGui
  if(NOT DEFINED CCOS_CCGUI_ACTIVE)
    set(CCOS_CCGUI_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCGUI_ACTIVE)
  if(NOT DEFINED CCOS_CCGUI_VERSION)
    set(CCOS_CCGUI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCGUI_VERSION)
  if(NOT DEFINED CCOS_CCGUI_PREBUILD)
    set(CCOS_CCGUI_PREBUILD false)
  endif(NOT DEFINED CCOS_CCGUI_PREBUILD)
  if(NOT DEFINED CCOS_CCGUI_STATIC)
    set(CCOS_CCGUI_STATIC true)
  endif(NOT DEFINED CCOS_CCGUI_STATIC)
  if(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
    set(CCOS_CCGUI_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcGui")
      message("Dependency for CcGui not solved: CcKernel")
      set(CCOS_CCGUI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcGui")
      message("Dependency for CcGui not enabled but required: CcKernel")
     set(CCOS_CCGUI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcGui not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcGui not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcTftp
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    set(CCOS_CCNETWORK_CCTFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_VERSION)
    set(CCOS_CCNETWORK_CCTFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_PREBUILD)
    set(CCOS_CCNETWORK_CCTFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATIC)
    set(CCOS_CCNETWORK_CCTFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCTFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcTftp")
      message("Dependency for CcTftp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCTFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcTftp")
      message("Dependency for CcTftp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCTFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTftp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTftp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcBitcoin
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
    set(CCOS_CCUTIL_CCBITCOIN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
    set(CCOS_CCUTIL_CCBITCOIN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
    set(CCOS_CCUTIL_CCBITCOIN_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
    set(CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcKernel")
      set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcDocuments
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
    set(CCOS_CCUTIL_CCDOCUMENTS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
    set(CCOS_CCUTIL_CCDOCUMENTS_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcDocuments")
      message("Dependency for CcDocuments not solved: CcKernel")
      set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcDocuments")
      message("Dependency for CcDocuments not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDocuments not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDocuments not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcDhcp
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    set(CCOS_CCNETWORK_CCDHCP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
    set(CCOS_CCNETWORK_CCDHCP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
    set(CCOS_CCNETWORK_CCDHCP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
    set(CCOS_CCNETWORK_CCDHCP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCDHCP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcTesting
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    set(CCOS_CCUTIL_CCTESTING_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
    set(CCOS_CCUTIL_CCTESTING_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
    set(CCOS_CCUTIL_CCTESTING_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
    set(CCOS_CCUTIL_CCTESTING_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
    set(CCOS_CCUTIL_CCTESTING_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcTesting")
      message("Dependency for CcTesting not solved: CcKernel")
      set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcTesting")
      message("Dependency for CcTesting not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTesting not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTesting not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcOSBuildConfig
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcKernel")
      set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Diable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcDocuments")
      set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Diable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
     set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcHash
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    set(CCOS_CCAPPS_CCHASH_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_VERSION)
    set(CCOS_CCAPPS_CCHASH_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_PREBUILD)
    set(CCOS_CCAPPS_CCHASH_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_STATIC)
    set(CCOS_CCAPPS_CCHASH_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_STATICRUNTIME)
    set(CCOS_CCAPPS_CCHASH_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcHash")
      message("Dependency for CcHash not solved: CcKernel")
      set(CCOS_CCAPPS_CCHASH_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcHash")
      message("Dependency for CcHash not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCHASH_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHash not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHash not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcOSBuildConfigApp
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcKernel")
      set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Diable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcDocuments")
      set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Diable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
     set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: jpeg
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
    set(CCOS_THIRDPARTY_JPEG_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
    set(CCOS_THIRDPARTY_JPEG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
    set(CCOS_THIRDPARTY_JPEG_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
    set(CCOS_THIRDPARTY_JPEG_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
    set(CCOS_THIRDPARTY_JPEG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  elseif(${CCOS_THIRDPARTY_JPEG_ACTIVE} GREATER 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcMedia
  if(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
    set(CCOS_CCMEDIA_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
  if(NOT DEFINED CCOS_CCMEDIA_VERSION)
    set(CCOS_CCMEDIA_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMEDIA_VERSION)
  if(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
    set(CCOS_CCMEDIA_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
  if(NOT DEFINED CCOS_CCMEDIA_STATIC)
    set(CCOS_CCMEDIA_STATIC true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATIC)
  if(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
    set(CCOS_CCMEDIA_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcMedia")
      message("Dependency for CcMedia not solved: CcKernel")
      set(CCOS_CCMEDIA_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcMedia")
      message("Dependency for CcMedia not enabled but required: CcKernel")
     set(CCOS_CCMEDIA_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMedia not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMedia not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: openssl
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
    set(CCOS_THIRDPARTY_OPENSSL_VERSION 1.1.0.5)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
    set(CCOS_THIRDPARTY_OPENSSL_PREBUILD true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
    set(CCOS_THIRDPARTY_OPENSSL_STATIC true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
    set(CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
  elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 1)
  endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcSsl
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    set(CCOS_CCNETWORK_CCSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_VERSION)
    set(CCOS_CCNETWORK_CCSSL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_PREBUILD)
    set(CCOS_CCNETWORK_CCSSL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATIC)
    set(CCOS_CCNETWORK_CCSSL_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcSsl")
      message("Dependency for CcSsl not solved: CcKernel")
      set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcSsl")
      message("Dependency for CcSsl not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message("Diable CcSsl")
      message("Dependency for CcSsl not solved: openssl")
      set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message("Diable CcSsl")
      message("Dependency for CcSsl not enabled but required: openssl")
     set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: openssl")
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: openssl")
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcFtp
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    set(CCOS_CCNETWORK_CCFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_VERSION)
    set(CCOS_CCNETWORK_CCFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_PREBUILD)
    set(CCOS_CCNETWORK_CCFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATIC)
    set(CCOS_CCNETWORK_CCFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcFtp")
      message("Dependency for CcFtp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcFtp")
      message("Dependency for CcFtp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcFtp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcFtp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcHttp
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    set(CCOS_CCNETWORK_CCHTTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_VERSION)
    set(CCOS_CCNETWORK_CCHTTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_PREBUILD)
    set(CCOS_CCNETWORK_CCHTTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATIC)
    set(CCOS_CCNETWORK_CCHTTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCHTTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcHttp")
      message("Dependency for CcHttp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcShell
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    set(CCOS_CCNETWORK_CCSHELL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_VERSION)
    set(CCOS_CCNETWORK_CCSHELL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_PREBUILD)
    set(CCOS_CCNETWORK_CCSHELL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATIC)
    set(CCOS_CCNETWORK_CCSHELL_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCSHELL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcShell")
      message("Dependency for CcShell not solved: CcKernel")
      set(CCOS_CCNETWORK_CCSHELL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcShell")
      message("Dependency for CcShell not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCSHELL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcShell not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcShell not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: sqlite3
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
    set(CCOS_THIRDPARTY_SQLITE3_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
    set(CCOS_THIRDPARTY_SQLITE3_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
    set(CCOS_THIRDPARTY_SQLITE3_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
    set(CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable sqlite3")
      message("Dependency for sqlite3 not solved: CcKernel")
      set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable sqlite3")
      message("Dependency for sqlite3 not enabled but required: CcKernel")
     set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for sqlite3 not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for sqlite3 not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

  # Project: CcSql
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    set(CCOS_CCUTIL_CCSQL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_VERSION)
    set(CCOS_CCUTIL_CCSQL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_PREBUILD)
    set(CCOS_CCUTIL_CCSQL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_STATIC)
    set(CCOS_CCUTIL_CCSQL_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_STATICRUNTIME)
    set(CCOS_CCUTIL_CCSQL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcSql")
      message("Dependency for CcSql not solved: CcKernel")
      set(CCOS_CCUTIL_CCSQL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcSql")
      message("Dependency for CcSql not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCSQL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSql not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSql not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Windows")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)

endif(WINDOWS)
################################################################################
# Config Check for cmake builds
################################################################################
if(LINUX)
  # Project: CcKernel
  if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    set(CCOS_CCKERNEL_ACTIVE 4)
  endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNEL_VERSION)
    set(CCOS_CCKERNEL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNEL_VERSION)
  if(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
    set(CCOS_CCKERNEL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNEL_STATIC)
    set(CCOS_CCKERNEL_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNEL_STATIC)
  if(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
    set(CCOS_CCKERNEL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCGUI_ACTIVE)
      if(${CCOS_CCGUI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCGUI_ACTIVE)
    if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
      if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
      if(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
      if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
      if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
      if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  elseif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)

  # Project: CcGui
  if(NOT DEFINED CCOS_CCGUI_ACTIVE)
    set(CCOS_CCGUI_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCGUI_ACTIVE)
  if(NOT DEFINED CCOS_CCGUI_VERSION)
    set(CCOS_CCGUI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCGUI_VERSION)
  if(NOT DEFINED CCOS_CCGUI_PREBUILD)
    set(CCOS_CCGUI_PREBUILD false)
  endif(NOT DEFINED CCOS_CCGUI_PREBUILD)
  if(NOT DEFINED CCOS_CCGUI_STATIC)
    set(CCOS_CCGUI_STATIC true)
  endif(NOT DEFINED CCOS_CCGUI_STATIC)
  if(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
    set(CCOS_CCGUI_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcGui")
      message("Dependency for CcGui not solved: CcKernel")
      set(CCOS_CCGUI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcGui")
      message("Dependency for CcGui not enabled but required: CcKernel")
     set(CCOS_CCGUI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcGui not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcGui not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)

  # Project: Raspbian
  if(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    set(CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE 0)
  endif(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_VERSION)
    set(CCOS_CCMODULES_PLATFORM_RASPBIAN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_VERSION)
  if(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_PREBUILD)
    set(CCOS_CCMODULES_PLATFORM_RASPBIAN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_PREBUILD)
  if(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_STATIC)
    set(CCOS_CCMODULES_PLATFORM_RASPBIAN_STATIC true)
  endif(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_STATIC)
  if(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_STATICRUNTIME)
    set(CCOS_CCMODULES_PLATFORM_RASPBIAN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable Raspbian")
      message("Dependency for Raspbian not solved: CcKernel")
      set(CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable Raspbian")
      message("Dependency for Raspbian not enabled but required: CcKernel")
     set(CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for Raspbian not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for Raspbian not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} EQUAL 1)

  # Project: CcTftp
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    set(CCOS_CCNETWORK_CCTFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_VERSION)
    set(CCOS_CCNETWORK_CCTFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_PREBUILD)
    set(CCOS_CCNETWORK_CCTFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATIC)
    set(CCOS_CCNETWORK_CCTFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCTFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCTFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcTftp")
      message("Dependency for CcTftp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCTFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcTftp")
      message("Dependency for CcTftp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCTFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTftp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTftp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} EQUAL 1)

  # Project: CcBitcoin
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
    set(CCOS_CCUTIL_CCBITCOIN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
    set(CCOS_CCUTIL_CCBITCOIN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
    set(CCOS_CCUTIL_CCBITCOIN_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
    set(CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcKernel")
      set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)

  # Project: CcDocuments
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
    set(CCOS_CCUTIL_CCDOCUMENTS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
    set(CCOS_CCUTIL_CCDOCUMENTS_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcDocuments")
      message("Dependency for CcDocuments not solved: CcKernel")
      set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcDocuments")
      message("Dependency for CcDocuments not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDocuments not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDocuments not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)

  # Project: CcDhcp
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    set(CCOS_CCNETWORK_CCDHCP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
    set(CCOS_CCNETWORK_CCDHCP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
    set(CCOS_CCNETWORK_CCDHCP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
    set(CCOS_CCNETWORK_CCDHCP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCDHCP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)

  # Project: CcTesting
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    set(CCOS_CCUTIL_CCTESTING_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
    set(CCOS_CCUTIL_CCTESTING_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
    set(CCOS_CCUTIL_CCTESTING_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
    set(CCOS_CCUTIL_CCTESTING_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
    set(CCOS_CCUTIL_CCTESTING_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcTesting")
      message("Dependency for CcTesting not solved: CcKernel")
      set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcTesting")
      message("Dependency for CcTesting not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTesting not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTesting not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)

  # Project: CcOSBuildConfig
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME)
    set(CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcKernel")
      set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Diable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not solved: CcDocuments")
      set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Diable CcOSBuildConfig")
      message("Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
     set(CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfig not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} EQUAL 1)

  # Project: CcHash
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    set(CCOS_CCAPPS_CCHASH_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_VERSION)
    set(CCOS_CCAPPS_CCHASH_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_PREBUILD)
    set(CCOS_CCAPPS_CCHASH_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_STATIC)
    set(CCOS_CCAPPS_CCHASH_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCHASH_STATICRUNTIME)
    set(CCOS_CCAPPS_CCHASH_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCHASH_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcHash")
      message("Dependency for CcHash not solved: CcKernel")
      set(CCOS_CCAPPS_CCHASH_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcHash")
      message("Dependency for CcHash not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCHASH_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHash not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHash not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCAPPS_CCHASH_ACTIVE} EQUAL 1)

  # Project: CcOSBuildConfigApp
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_VERSION)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_PREBUILD)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATIC)
  if(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
    set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME false)
  endif(NOT DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcKernel")
      set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
     set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Diable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not solved: CcDocuments")
      set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Diable CcOSBuildConfigApp")
      message("Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
     set(CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcOSBuildConfigApp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} EQUAL 1)

  # Project: jpeg
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
    set(CCOS_THIRDPARTY_JPEG_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
    set(CCOS_THIRDPARTY_JPEG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
    set(CCOS_THIRDPARTY_JPEG_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
    set(CCOS_THIRDPARTY_JPEG_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
    set(CCOS_THIRDPARTY_JPEG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  elseif(${CCOS_THIRDPARTY_JPEG_ACTIVE} GREATER 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)

  # Project: CcMedia
  if(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
    set(CCOS_CCMEDIA_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCMEDIA_ACTIVE)
  if(NOT DEFINED CCOS_CCMEDIA_VERSION)
    set(CCOS_CCMEDIA_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCMEDIA_VERSION)
  if(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
    set(CCOS_CCMEDIA_PREBUILD false)
  endif(NOT DEFINED CCOS_CCMEDIA_PREBUILD)
  if(NOT DEFINED CCOS_CCMEDIA_STATIC)
    set(CCOS_CCMEDIA_STATIC true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATIC)
  if(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
    set(CCOS_CCMEDIA_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCMEDIA_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcMedia")
      message("Dependency for CcMedia not solved: CcKernel")
      set(CCOS_CCMEDIA_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcMedia")
      message("Dependency for CcMedia not enabled but required: CcKernel")
     set(CCOS_CCMEDIA_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcMedia not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcMedia not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCMEDIA_ACTIVE} EQUAL 1)

  # Project: openssl
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
    set(CCOS_THIRDPARTY_OPENSSL_VERSION 1.1.0.5)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
    set(CCOS_THIRDPARTY_OPENSSL_PREBUILD true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
    set(CCOS_THIRDPARTY_OPENSSL_STATIC true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
    set(CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_THIRDPARTY_OPENSSL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)
  elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 1)
  endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 1)

  # Project: CcSsl
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    set(CCOS_CCNETWORK_CCSSL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_VERSION)
    set(CCOS_CCNETWORK_CCSSL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_PREBUILD)
    set(CCOS_CCNETWORK_CCSSL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATIC)
    set(CCOS_CCNETWORK_CCSSL_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCSSL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSSL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcSsl")
      message("Dependency for CcSsl not solved: CcKernel")
      set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcSsl")
      message("Dependency for CcSsl not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message("Diable CcSsl")
      message("Dependency for CcSsl not solved: openssl")
      set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message("Diable CcSsl")
      message("Dependency for CcSsl not enabled but required: openssl")
     set(CCOS_CCNETWORK_CCSSL_ACTIVE 0)
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSsl not solved: openssl")
    elseif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSsl not enabled but required: openssl")
    endif(NOT DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} EQUAL 1)

  # Project: CcFtp
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    set(CCOS_CCNETWORK_CCFTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_VERSION)
    set(CCOS_CCNETWORK_CCFTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_PREBUILD)
    set(CCOS_CCNETWORK_CCFTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATIC)
    set(CCOS_CCNETWORK_CCFTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCFTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCFTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcFtp")
      message("Dependency for CcFtp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCFTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcFtp")
      message("Dependency for CcFtp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCFTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcFtp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcFtp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} EQUAL 1)

  # Project: CcHttp
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    set(CCOS_CCNETWORK_CCHTTP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_VERSION)
    set(CCOS_CCNETWORK_CCHTTP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_PREBUILD)
    set(CCOS_CCNETWORK_CCHTTP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATIC)
    set(CCOS_CCNETWORK_CCHTTP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCHTTP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCHTTP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcHttp")
      message("Dependency for CcHttp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcHttp")
      message("Dependency for CcHttp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCHTTP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcHttp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcHttp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} EQUAL 1)

  # Project: CcShell
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    set(CCOS_CCNETWORK_CCSHELL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_VERSION)
    set(CCOS_CCNETWORK_CCSHELL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_PREBUILD)
    set(CCOS_CCNETWORK_CCSHELL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATIC)
    set(CCOS_CCNETWORK_CCSHELL_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCSHELL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCSHELL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcShell")
      message("Dependency for CcShell not solved: CcKernel")
      set(CCOS_CCNETWORK_CCSHELL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcShell")
      message("Dependency for CcShell not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCSHELL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcShell not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcShell not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} EQUAL 1)

  # Project: sqlite3
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
    set(CCOS_THIRDPARTY_SQLITE3_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
    set(CCOS_THIRDPARTY_SQLITE3_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
    set(CCOS_THIRDPARTY_SQLITE3_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
    set(CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_SQLITE3_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable sqlite3")
      message("Dependency for sqlite3 not solved: CcKernel")
      set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable sqlite3")
      message("Dependency for sqlite3 not enabled but required: CcKernel")
     set(CCOS_THIRDPARTY_SQLITE3_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for sqlite3 not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for sqlite3 not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} EQUAL 1)

  # Project: CcSql
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    set(CCOS_CCUTIL_CCSQL_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_VERSION)
    set(CCOS_CCUTIL_CCSQL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_PREBUILD)
    set(CCOS_CCUTIL_CCSQL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_STATIC)
    set(CCOS_CCUTIL_CCSQL_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCSQL_STATICRUNTIME)
    set(CCOS_CCUTIL_CCSQL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCSQL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcSql")
      message("Dependency for CcSql not solved: CcKernel")
      set(CCOS_CCUTIL_CCSQL_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcSql")
      message("Dependency for CcSql not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCSQL_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcSql not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcSql not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCSQL_ACTIVE} EQUAL 1)

endif(LINUX)
################################################################################
# Config Check for cmake builds
################################################################################
if(GENERIC)
  # Project: CcKernel
  if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    set(CCOS_CCKERNEL_ACTIVE 4)
  endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  if(NOT DEFINED CCOS_CCKERNEL_VERSION)
    set(CCOS_CCKERNEL_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCKERNEL_VERSION)
  if(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
    set(CCOS_CCKERNEL_PREBUILD false)
  endif(NOT DEFINED CCOS_CCKERNEL_PREBUILD)
  if(NOT DEFINED CCOS_CCKERNEL_STATIC)
    set(CCOS_CCKERNEL_STATIC false)
  endif(NOT DEFINED CCOS_CCKERNEL_STATIC)
  if(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
    set(CCOS_CCKERNEL_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCKERNEL_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCGUI_ACTIVE)
      if(${CCOS_CCGUI_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCGUI_ACTIVE)
    if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
      if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
      if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
      if(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
      if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(DEFINED CCOS_CCMEDIA_ACTIVE)
      if(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCMEDIA_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
      if(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCHTTP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCHTTP_ACTIVE)
    if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
      if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
      if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
      if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
        set(CCOS_CCKERNEL_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  elseif(${CCOS_CCKERNEL_ACTIVE} GREATER 1)
  endif(${CCOS_CCKERNEL_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  # Project: CcGui
  if(NOT DEFINED CCOS_CCGUI_ACTIVE)
    set(CCOS_CCGUI_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCGUI_ACTIVE)
  if(NOT DEFINED CCOS_CCGUI_VERSION)
    set(CCOS_CCGUI_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCGUI_VERSION)
  if(NOT DEFINED CCOS_CCGUI_PREBUILD)
    set(CCOS_CCGUI_PREBUILD false)
  endif(NOT DEFINED CCOS_CCGUI_PREBUILD)
  if(NOT DEFINED CCOS_CCGUI_STATIC)
    set(CCOS_CCGUI_STATIC true)
  endif(NOT DEFINED CCOS_CCGUI_STATIC)
  if(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
    set(CCOS_CCGUI_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCGUI_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCGUI_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcGui")
      message("Dependency for CcGui not solved: CcKernel")
      set(CCOS_CCGUI_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcGui")
      message("Dependency for CcGui not enabled but required: CcKernel")
     set(CCOS_CCGUI_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCGUI_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcGui not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcGui not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCGUI_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  # Project: CcBitcoin
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
    set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
    set(CCOS_CCUTIL_CCBITCOIN_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
    set(CCOS_CCUTIL_CCBITCOIN_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
    set(CCOS_CCUTIL_CCBITCOIN_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
    set(CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCBITCOIN_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcBitcoin")
      message("Dependency for CcBitcoin not solved: CcKernel")
      set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcBitcoin")
      message("Dependency for CcBitcoin not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCBITCOIN_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcBitcoin not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcBitcoin not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCBITCOIN_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  # Project: CcDocuments
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
    set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
    set(CCOS_CCUTIL_CCDOCUMENTS_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
    set(CCOS_CCUTIL_CCDOCUMENTS_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
    set(CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
      if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
      if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
      if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
        set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 2)
      endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 1)
    endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcDocuments")
      message("Dependency for CcDocuments not solved: CcKernel")
      set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcDocuments")
      message("Dependency for CcDocuments not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCDOCUMENTS_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDocuments not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDocuments not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  # Project: CcDhcp
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
    set(CCOS_CCNETWORK_CCDHCP_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_ACTIVE)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
    set(CCOS_CCNETWORK_CCDHCP_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_VERSION)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
    set(CCOS_CCNETWORK_CCDHCP_PREBUILD false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_PREBUILD)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
    set(CCOS_CCNETWORK_CCDHCP_STATIC false)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATIC)
  if(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
    set(CCOS_CCNETWORK_CCDHCP_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCNETWORK_CCDHCP_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not solved: CcKernel")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcKernel")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not solved: CcDocuments")
      set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message("Diable CcDhcp")
      message("Dependency for CcDhcp not enabled but required: CcDocuments")
     set(CCOS_CCNETWORK_CCDHCP_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  elseif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
    if(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
      message(FATAL_ERROR "Dependency for CcDhcp not solved: CcDocuments")
    elseif(${CCOS_CCUTIL_CCDOCUMENTS_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcDhcp not enabled but required: CcDocuments")
    endif(NOT DEFINED CCOS_CCUTIL_CCDOCUMENTS_ACTIVE)
  endif(${CCOS_CCNETWORK_CCDHCP_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  # Project: CcTesting
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
    set(CCOS_CCUTIL_CCTESTING_ACTIVE 1)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_ACTIVE)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
    set(CCOS_CCUTIL_CCTESTING_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_VERSION)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
    set(CCOS_CCUTIL_CCTESTING_PREBUILD false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_PREBUILD)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
    set(CCOS_CCUTIL_CCTESTING_STATIC false)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATIC)
  if(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
    set(CCOS_CCUTIL_CCTESTING_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_CCUTIL_CCTESTING_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message("Diable CcTesting")
      message("Dependency for CcTesting not solved: CcKernel")
      set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message("Diable CcTesting")
      message("Dependency for CcTesting not enabled but required: CcKernel")
     set(CCOS_CCUTIL_CCTESTING_ACTIVE 0)
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  elseif(${CCOS_CCUTIL_CCTESTING_ACTIVE} GREATER 1)
    if(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
      message(FATAL_ERROR "Dependency for CcTesting not solved: CcKernel")
    elseif(${CCOS_CCKERNEL_ACTIVE} EQUAL 0)
      message(FATAL_ERROR "Dependency for CcTesting not enabled but required: CcKernel")
    endif(NOT DEFINED CCOS_CCKERNEL_ACTIVE)
  endif(${CCOS_CCUTIL_CCTESTING_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

  # Project: jpeg
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
    set(CCOS_THIRDPARTY_JPEG_ACTIVE 1)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_ACTIVE)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
    set(CCOS_THIRDPARTY_JPEG_VERSION 0.0.0.0)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_VERSION)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
    set(CCOS_THIRDPARTY_JPEG_PREBUILD false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_PREBUILD)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
    set(CCOS_THIRDPARTY_JPEG_STATIC false)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATIC)
  if(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
    set(CCOS_THIRDPARTY_JPEG_STATICRUNTIME true)
  endif(NOT DEFINED CCOS_THIRDPARTY_JPEG_STATICRUNTIME)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  # Check if required because of income dependencies
  if(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  elseif(${CCOS_THIRDPARTY_JPEG_ACTIVE} GREATER 1)
  endif(${CCOS_THIRDPARTY_JPEG_ACTIVE} EQUAL 1)
  if(DEFINED CCOS_CCMEDIA_ACTIVE)
    if(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcMedia not allowed on Generic")
    endif(${CCOS_CCMEDIA_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMEDIA_ACTIVE)
  if(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
    if(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
      message(FATAL_ERROR "Raspbian not allowed on Generic")
    endif(${CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCMODULES_PLATFORM_RASPBIAN_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcFtp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCFTP_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcShell not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSHELL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSHELL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
    if(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSsl not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCSSL_ACTIVE)
  if(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
    if(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcTftp not allowed on Generic")
    endif(${CCOS_CCNETWORK_CCTFTP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCNETWORK_CCTFTP_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
    if(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcSql not allowed on Generic")
    endif(${CCOS_CCUTIL_CCSQL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCSQL_ACTIVE)
  if(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
    if(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfig not allowed on Generic")
    endif(${CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCUTIL_CCOSBUILDCONFIG_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
    if(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcHash not allowed on Generic")
    endif(${CCOS_CCAPPS_CCHASH_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCHASH_ACTIVE)
  if(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
    if(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
      message(FATAL_ERROR "CcOSBuildConfigApp not allowed on Generic")
    endif(${CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_CCAPPS_CCOSBUILDCONFIGAPP_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
    if(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
      message(FATAL_ERROR "openssl not allowed on Generic")
    endif(${CCOS_THIRDPARTY_OPENSSL_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_OPENSSL_ACTIVE)
  if(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)
    if(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
      message(FATAL_ERROR "sqlite3 not allowed on Generic")
    endif(${CCOS_THIRDPARTY_SQLITE3_ACTIVE} GREATER 0)
  endif(DEFINED CCOS_THIRDPARTY_SQLITE3_ACTIVE)

endif(GENERIC)
