/**
 * This file is part of CcOS.
 *
 * CcOS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CcOS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with CcOS.  If not, see <http://www.gnu.org/licenses/>.
 **/
/**
 * @page      Linux
 * @subpage   CcLinuxSocket
 *
 * @page      CcLinuxSocket
 * @author    Andreas Dirmeier
 * @copyright  Andreas Dirmeier (C) 2015
 * @version   0.01
 * @date      2015-10
 * @par       Language   C++ ANSI V3
 * @brief     Class CcLinuxSocket
 */
#ifndef CcLinuxSocket_H_
#define CcLinuxSocket_H_

#include "CcBase.h"
#include "Network/CcSocket.h"
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

/**
* @brief Create a Socket on Linux Systems
*/
class CcLinuxSocket : public CcSocket
{
public:
  /**
  * @brief Constructor
  */
  CcLinuxSocket( ESocketType type = ESocketType::TCP );

  CcLinuxSocket(int socket, sockaddr sockAddr, int sockAddrlen);
  /**
   * @brief Destructor
   */
  virtual ~CcLinuxSocket( void );

  CcStatus open(EOpenFlags) override{ return true; }
  CcStatus close() override;
  CcStatus cancel();

  /**
   * @brief connect to Host with known IP-Address and Port
   * @param Port:     Port where host ist waiting for connection
   * @return true if connection was successfully established
   */
  CcStatus bind(uint16 Port) override;

  /**
   * @brief connect to Host with known Name in Network and Port
   * @param hostName: Name of Host to connect to
   * @param Port:     Port where host ist waiting for connection
   * @return true if connection was successfully established
   */
  CcStatus connect(const CcSocketAddressInfo& oAddressInfo) override;

  /**
  * @brief connect to Host with known Name in Network and Port
  * @param hostName: Name of Host to connect to
  * @param Port:     Port where host ist waiting for connection
  * @return true if connection was successfully established
  */
  CcStatus connect(const CcString &hostName, const CcString &hostPort) override;

  /**
   * @brief Socket becomes a Host and listen on Port
   * @return true if port is successfully initiated.
   */
  CcStatus listen(void) override;

  /**
   * @brief Waiting for an incoming connection.
   * @return Valid socket if connection established, otherwise 0.
   */
  CcSocket* accept(void) override;

  /**
   * @brief Send data to established socket-connection
   * @param buf: Buffer of data to be send
   * @param bufSize: size of buffer to send
   * @return return true if transmission succeeded.
   */
  size_t write(const void *buf, size_t bufSize) override;

  /**
   * @brief Receive incoming data from socket
   * @param buf: Buffer to store received data.
   * @param bufSize: maximum size of buffer;
   * @return Size of data read from socket.
   */
  size_t read(void *buf, size_t bufSize) override;

  /**
   * @brief read with timeout
   */
  size_t readTimeout(char *buf, size_t bufSize, time_t timeout = 10);

  /**
   * @brief Get ip-address of Hostname
   * @param hostname: Hostname as String to search for
   * @param addr [out]: found ip-address or 0.0.0.0 if failed
   * @return
   */
  CcSocketAddressInfo getHostByName(const CcString& hostname) override;

  void setTimeout(const CcDateTime& uiTimeValue) override;

  virtual SOCKETFD getSocketFD() { return m_ClientSocket; }
private:
  ESocketType   m_Type;
  int           m_ClientSocket = -1;      ///< ClientSocket generated by InitSocket
  sockaddr      m_sockAddr;
  int           m_sockAddrlen = 0;
};

#endif /* CcLinuxSocket_H_ */
