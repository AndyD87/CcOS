/**
 * This file is part of CcOS.
 *
 * CcOS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CcOS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with CcOS.  If not, see <http://www.gnu.org/licenses/>.
 **/
/**
 * @page      Linux
 * @subpage   ILwipSocket
 *
 * @page      ILwipSocket
 * @author    Andreas Dirmeier
 * @copyright  Andreas Dirmeier (C) 2015
 * @par       Language: C++11
 * @brief     Class ILwipSocket
 */
#ifndef H_ILwipSockett_H_
#define H_ILwipSockett_H_

#include "CcBase.h"
#include "Network/ISocket.h"
CCEXTERNC_BEGIN
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
CCEXTERNC_END

#ifdef bind
  #undef bind
#endif // bind

#ifdef connect
  #undef connect
#endif // connect

#ifdef listen
  #undef listen
#endif // listen

#ifdef accept
  #undef accept
#endif // accept

#ifdef close
  #undef close
#endif // close

#ifdef shutdown
  #undef shutdown
#endif // shutdown

#ifdef read
  #undef read
#endif // read

#ifdef write
  #undef write
#endif // write

/**
* @brief Create a Socket on Linux Systems
*/
class ILwipSocket : public ISocket
{
public:
  /**
  * @brief Constructor
  */
  ILwipSocket( ESocketType type = ESocketType::TCP );

  ILwipSocket(int socket, sockaddr sockAddr, uint32 sockAddrlen);
  /**
   * @brief Destructor
   */
  virtual ~ILwipSocket();

  /**
   * @brief Get ip-address of Hostname
   * @param hostname: Hostname as String to search for
   * @param addr [out]: found ip-address or 0.0.0.0 if failed
   * @return
   */
  CcSocketAddressInfo getHostByName(const CcString& hostname) override;

  virtual CcStatus setTimeout(const CcDateTime& uiTimeValue, ERwMode eMode = ERwMode::ReadWrite) override;

  virtual CcSocketAddressInfo& getAddressInfo() override
  { return m_oConnectionInfo; }

  virtual CcSocketAddressInfo& getPeerInfo() override;

  virtual void setPeerInfo(const CcSocketAddressInfo& oPeerInfo) override;

  virtual CcStatus setOption(ESocketOption eOption, void* pData, size_t uiDataLen) override;

  virtual CcStatus setOptionRaw(int iLevel, int iOptName, void* pData, size_t uiDataLen) override;

  virtual SOCKETFD getSocketFD() override { return m_hClientSocket; }

protected:
  int           m_hClientSocket = -1;      //!< ClientSocket generated by InitSocket
  CcSocketAddressInfo m_oConnectionInfo;
  CcSocketAddressInfo m_oPeerInfo;
};

#endif // _ILwipSockett_H_
