/*
 * This file is part of CcOS.
 *
 * CcOS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * CcOS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with CcOS.  If not, see <http://www.gnu.org/licenses/>.
 **/
/**
 * @page      Windows
 * @subpage   CcWindowsSocketBase
 *
 * @page      CcWindowsSocketBase
 * @copyright Andreas Dirmeier (C) 2017
 * @author    Andreas Dirmeier
 * @par       Web:      http://coolcow.de/projects/CcOS
 * @par       Language: C++11
 * @brief     Class CcWindowsSocketBase
 */
#ifndef CcWindowsSocketBase_H_
#define CcWindowsSocketBase_H_

#include "CcBase.h"
#include <winsock2.h>
#include "CcWindowsGlobals.h"
#include "Network/CcSocketAbstract.h"
#include <ws2tcpip.h>

/**
 * @brief Create a Socket on Windows Systems
 */
class CcWindowsSocketBase : public CcSocketAbstract
{
public:
  /**
   * @brief Constructor
   */
  CcWindowsSocketBase( ESocketType type = ESocketType::TCP );

  CcWindowsSocketBase(SOCKET socket, sockaddr sockAddr, int sockAddrlen);
  /**
   * @brief Destructor
   */
  virtual ~CcWindowsSocketBase( void );

  virtual CcStatus open(EOpenFlags eOpenFlags = EOpenFlags::NoFlag) = 0;
  virtual CcStatus close() override;
  virtual CcStatus cancel() override;

  /**
   * @brief connect to Host with known IP-Address and Port
   * @param Port:     Port where host ist waiting for connection
   * @return true if connection was successfully established
   */
  virtual CcStatus bind(const CcSocketAddressInfo& oAddrInfo) = 0;

  /**
   * @brief connect to Host with known Name in Network and Port
   * @param hostName: Name of Host to connect to
   * @param Port:     Port where host ist waiting for connection
   * @return true if connection was successfully established
   */
  virtual CcStatus connect(const CcSocketAddressInfo& oAddressInfo) = 0;

  /**
   * @brief Socket becomes a Host and listen on Port
   * @return true if port is successfully initiated.
   */
  virtual CcStatus listen(void) = 0;

  /**
   * @brief Waiting for an incoming connection.
   * @return Valid socket if connection established, otherwise 0.
   */
  virtual CcSocketAbstract* accept(void) = 0;

  /**
   * @brief Receive incoming data from socket
   * @param buf: Buffer to store received data.
   * @param bufSize: maximum size of buffer;
   * @return Size of data read from socket.
   */
  virtual size_t read(void *buf, size_t bufSize) = 0;

  /**
   * @brief Send data to established socket-connection
   * @param buf: Buffer of data to be send
   * @param bufSize: size of buffer to send
   * @return return true if transmission succeeded.
   */
  virtual size_t write(const void *buf, size_t bufSize) = 0;

  /**
   * @brief read with timeout
   */
  virtual size_t readTimeout(char *buf, size_t bufSize, time_t timeout) = 0;

  /**
   * @brief Get ip-address of Hostname
   * @param hostname: Hostname as String to search for
   * @param addr [out]: found ip-address or 0.0.0.0 if failed
   * @return
   */
  CcSocketAddressInfo getHostByName(const CcString& hostname) override;

  void setTimeout(const CcDateTime& uiTimeValue) override;

  virtual CcSocketAddressInfo getPeerInfo(void) override;

  virtual void setPeerInfo(const CcSocketAddressInfo& oPeerInfo) override;

  SOCKETFD getSocketFD() override {return static_cast<SOCKETFD>(m_ClientSocket);}

  virtual CcStatus setOption(ESocketOption eOption, void* pData, size_t uiDataLen) override;

  virtual CcStatus setOptionRaw(int iLevel, int iOptName, void* pData, size_t uiDataLen) override;

private:
  static void startWSA(void);

protected:
  SOCKET        m_ClientSocket;      //!< ClientSocket generated by InitSocket
  CcSocketAddressInfo m_oConnectionInfo;
  CcSocketAddressInfo m_oPeerInfo;

private:
  static bool   g_sWsaStarted;
  static CRITICAL_SECTION m_CS;
};

#endif /* CcWindowsSocketBase_H_ */
